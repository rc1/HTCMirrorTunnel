"use strict";function makeWebSocketClient(e){return W.promise(function(n,t){console.log("Connecting to websocket client:",e.wsUrl),e.wsClient=new W.JSONSocketConnection({socketUrl:e.wsUrl});var r=once(function(){$("[data-disconnected-warning]").remove(),report("CONNECTED","to:",e.wsUrl),n(e)});e.wsClient.on("open",r),e.wsClient.on("error",makeReporter("Web Socket Error")),e.wsClient.on("close",makeReporter("Web Socket Close")),e.wsClient.openSocketConnection()})}function subscribeToHostControlMode(e){return W.promise(function(n,t){e.controlMode="",RestesqueUtil.subscribeWithInitialGet(e.wsClient,"/host/control/mode/",function(n){e.controlMode=n.getBody(),console.log("Control Mode Change to:",e.controlMode)}).success(function(){n(e)})})}function addPunterCid(e){return W.promise(function(n,t){e.punterCid=$("[data-punter-cid]").data("punterCid"),n(e)})}function makePunterVizs(e){return W.promise(function(n,t){$("[data-punter-viz]").toArray().map(function(n){e.punterViz=PunterViz.makeViz(),e.punterViz.containerEl=n;PunterViz.initViz(e.punterViz).error(function(e){console.error("Failed to create Punter app",e)}).success(function(n){if(window.location.search.indexOf("debug")>-1){var t=document.createElement("input");t.setAttribute("type","range"),t.setAttribute("min",-1),t.setAttribute("max",1),t.setAttribute("step",.01),t.setAttribute("value",.25),t.setAttribute("style","position: absolute"),$(t).asEventStream("change").map(function(e){return e.currentTarget}).map(function(e){return $(e).val()}).onValue(function(e){return PunterViz.setVelocity(n,null,e,null)}),$("#punter").prepend(t)}var r=25.714285714,o=$(window).asEventStream("deviceorientation").map(function(e){return e.originalEvent.gamma});o.map(function(e){return-r>e?"backward":e>r?"forward":"none"}).skipDuplicates().throttle(100).onValue(function(n){"phone-"+e.punterCid===e.controlMode&&RestesqueUtil.post(e.wsClient,"/motor/rotation/direction/",n)}),o.map(function(e){return Math.abs(e)}).map(function(e){return e>90-r?"high":e>90-2*r?"medium":"low"}).throttle(100).onValue(function(n){"phone-"+e.punterCid===e.controlMode&&RestesqueUtil.post(e.wsClient,"/motor/rotation/speed/",n)}),console.log("Punter application made")})}),n(e)})}function makeRestRadioButtons(e){return W.promise(function(n,t){$('[data-rest-type="radio-post"]').toArray().map($).map(function(n){var t=n.parent();t.on("click touchend",function(t){return t.preventDefault(),console.log("sending",n.val(),"to",n.data("restUri")),RestesqueUtil.post(e.wsClient,n.data("restUri"),n.val()),!1})}),$('[data-rest-type="feildset"]').toArray().map($).map(function(n){var t=n.find('input[type="radio"]').checkboxradio();console.log("got a field set",n.data("restUri")),RestesqueUtil.subscribeWithInitialGet(e.wsClient,n.data("restUri"),function(e){t.prop("checked",!1).checkboxradio("refresh").filter('input[value="'+e.getBody()+'"]').attr("checked","checked").checkboxradio("refresh").parent().find("label").removeClass("ui-radio-off").addClass("ui-radio-on")})}),n(e)})}function once(e){var n=!1;return function(){n||(e(),n=!0)}}function report(e,n){console.log("[",e,"]",W.rest(W.toArray(arguments)).join(" "))}function makeReporter(e,n){var t=arguments;return function(){report.apply(this,t);var e=arguments;return W.promise(function(n,t){n.apply(this,e)})}}var PunterViz=function(){function e(){return{containerEl:document.createElement("div"),backroundColor:6382180,velocity:[0,0,0],preRenderFns:[],preCubeCamRenderFns:[],postCubeCamRenderFns:[]}}function n(e){return W.promise(function(n,t){e.camera=new THREE.PerspectiveCamera(70,window.innerWidth/window.innerHeight,1,3e3),l(e,0,0,200),e.scene=new THREE.Scene,e.renderer=new THREE.WebGLRenderer({antialias:!1}),e.renderer.setPixelRatio(window.devicePixelRatio),e.renderer.setSize(window.innerWidth,window.innerHeight),e.renderer.setClearColor(e.backgroundColor),e.renderer.sortObjects=!1,e.containerEl.appendChild(e.renderer.domElement),n(e)})}function t(e){return W.promise(function(n,t){var r=document.createElement("video");r.autoplay=!0,navigator.webkitGetUserMedia({video:!0},function(e){r.src=URL.createObjectURL(e)},function(e){console.log("Failed to get a stream due to",e)}),e.webCamTexture=new THREE.Texture(r),e.webCamTexture.minFilter=THREE.LinearFilter,u(e,function(n,t){r.readyState===r.HAVE_ENOUGH_DATA&&(e.webCamTexture.needsUpdate=!0)}),n(e)})}function r(e){return W.promise(function(n,t){e.cubeCamera=new THREE.CubeCamera(1,3e3,256),e.cubeCamera.renderTarget.minFilter=THREE.LinearMipMapLinearFilter,u(e,function(n,t){e.preCubeCamRenderFns.forEach(function(e){return e(n,t)}),e.cubeCamera.updateCubeMap(e.renderer,e.scene),e.postCubeCamRenderFns.forEach(function(e){return e(n,t)})}),n(e)})}function o(e){return W.promise(function(n,t){e.webCamMaterial=new THREE.MeshBasicMaterial({map:e.webCamTexture,color:16777215,side:THREE.DoubleSide}),n(e)})}function i(e){return W.promise(function(n,t){function r(t){console.log(t.children[0]),e.webCamHedronMesh=t.children[0].clone(),e.webCamHedronMesh.material=e.webCamMaterial.clone();var r=2800;e.webCamHedronMesh.scale.set(r,r,r);var o=W.randomBetween(2e-4,2e-5),i=W.randomBetween(2e-4,2e-5),a=W.randomBetween(2e-4,2e-5);u(e,function(n,t){e.webCamHedronMesh.rotation.x+=n*o,e.webCamHedronMesh.rotation.y+=n*i,e.webCamHedronMesh.rotation.z+=n*a}),e.scene.add(e.webCamHedronMesh),e.preCubeCamRenderFns.push(function(){e.webCamHedronMesh.visible=!0,e.webCamHedronMesh.material.color.set(16777215)}),e.postCubeCamRenderFns.push(function(){e.webCamHedronMesh.visible=!0,e.webCamHedronMesh.material.color.set(14276019)}),n(e)}var o=new THREE.OBJLoader;o.load("/obj/hedron.obj",r)})}function a(e){return W.promise(function(n,t){e.scene.add(new THREE.AmbientLight(2236962));var r=new THREE.DirectionalLight(16777215,2);r.position.set(2,1.2,10).normalize(),e.scene.add(r),r=new THREE.DirectionalLight(16777215,1),r.position.set(-2,1.2,-10).normalize(),e.scene.add(r),n(e)})}function s(e){return W.promise(function(n,t){function r(e){this.velocity=W.randomBetween(.2,1),this.mesh=e.clone(),this.mesh.material=r.material.clone(),this.mesh.scale.x=r.initialScale,this.mesh.scale.y=r.initialScale,this.mesh.scale.z=r.initialScale;var n=100;this.mesh.position.set((Math.random()-.5)*n,(Math.random()-.5)*n,(Math.random()-.5)*n),this.anchor=new THREE.Object3D,this.anchor.add(this.mesh)}function o(n){var t=n.children[0],o=100,a=5,s=100;!function c(){if(i.length<o){var n=new r(t);e.swarmObject3D.add(n.anchor),i.push(n),setTimeout(c,W.map(i.length/o,0,1,s,a,W.interpolations.easeIn))}}()}var i=[];e.swarmObject3D=new THREE.Object3D,e.scene.add(e.swarmObject3D),e.preCubeCamRenderFns.push(function(){e.swarmObject3D.visible=!1}),e.postCubeCamRenderFns.push(function(){e.swarmObject3D.visible=!0}),u(e,function(e,n){i.forEach(function(t){return t.update(e,n)})}),r.material=new THREE.MeshPhongMaterial({color:16777215,shininess:0,specular:16777215,envMap:e.cubeCamera.renderTarget,reflectivity:1,side:THREE.DoubleSide}),r.initialScale=200,r.prototype.update=function(n,t){this.anchor.rotation.x+=e.velocity[0]/10,this.anchor.rotation.y+=e.velocity[1]/10,this.anchor.rotation.z+=e.velocity[2]/10,this.mesh.rotation.x+=.002,this.mesh.rotation.y+=.001,this.mesh.rotation.z+=.003};var a=new THREE.OBJLoader;a.load("/obj/pillow-box.obj",o),n(e)})}function c(e){return W.promise(function(n,t){var r=0,o=0;!function i(n){window.requestAnimationFrame(i),o=n-r,r=n,e.preRenderFns.forEach(function(e){return e(o,n)}),e.renderer.clear(),e.renderer.render(e.scene,e.camera)}(r),n(e)})}function u(e,n){return e.preRenderFns.push(n),e}function l(e,n,t,r){return e.camera.position.x=n,e.camera.position.y=t,e.camera.position.z=r,e}function d(e,n,t,r){return W.isDefined(n)&&null!==n&&(e.velocity[0]=n),W.isDefined(t)&&null!==t&&(e.velocity[1]=t),W.isDefined(r)&&null!==r&&(e.velocity[2]=r),e}var m=W.composePromisers(n,t,o,r,i,s,a,c);return{makeViz:e,initViz:m,setVelocity:d}}(),makeApp=function(){return{wsUrl:W.join("https:"===document.location.protocol?"wss://":"ws://",document.location.host,"/")}},initApp=W.composePromisers(makeWebSocketClient,subscribeToHostControlMode,addPunterCid,makePunterVizs,makeRestRadioButtons);$(function(){initApp(makeApp()).success(function(e){report("OK","TheWorkers.net"),window.app=e})});
//# sourceMappingURL=data:application/json;base64,