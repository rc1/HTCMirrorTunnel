"use strict";var PunterViz=function(){function e(){return{containerEl:document.createElement("div"),backroundColor:6382180,preRenderFns:[],preCubeCamRenderFns:[],postCubeCamRenderFns:[]}}function n(e){return W.promise(function(n,r){e.camera=new THREE.PerspectiveCamera(70,window.innerWidth/window.innerHeight,1,3e3),u(e,0,0,200),e.scene=new THREE.Scene,e.renderer=new THREE.WebGLRenderer({antialias:!1}),e.renderer.setPixelRatio(window.devicePixelRatio),e.renderer.setSize(window.innerWidth,window.innerHeight),e.renderer.setClearColor(e.backgroundColor),e.renderer.sortObjects=!1,e.containerEl.appendChild(e.renderer.domElement),n(e)})}function r(e){return W.promise(function(n,r){var t=document.createElement("video");t.autoplay=!0,navigator.webkitGetUserMedia({video:!0},function(e){t.src=URL.createObjectURL(e)},function(e){console.log("Failed to get a stream due to",e)}),e.webCamTexture=new THREE.Texture(t),e.webCamTexture.minFilter=THREE.LinearFilter,s(e,function(n,r){t.readyState===t.HAVE_ENOUGH_DATA&&(e.webCamTexture.needsUpdate=!0)}),n(e)})}function t(e){return W.promise(function(n,r){e.cubeCamera=new THREE.CubeCamera(1,3e3,256),e.cubeCamera.renderTarget.minFilter=THREE.LinearMipMapLinearFilter,s(e,function(n,r){e.preCubeCamRenderFns.forEach(function(e){return e(n,r)}),e.cubeCamera.updateCubeMap(e.renderer,e.scene),e.postCubeCamRenderFns.forEach(function(e){return e(n,r)})}),n(e)})}function i(e){return W.promise(function(n,r){var t=new THREE.MeshBasicMaterial({map:e.webCamTexture,color:16777215,side:THREE.BackSide});e.webCamvBoxMesh=new THREE.Mesh(new THREE.BoxGeometry(2e3,2e3,2e3),t);var i=W.randomBetween(2e-4,2e-5),a=W.randomBetween(2e-4,2e-5),o=W.randomBetween(2e-4,2e-5);s(e,function(n,r){e.webCamvBoxMesh.rotation.x+=n*i,e.webCamvBoxMesh.rotation.y+=n*a,e.webCamvBoxMesh.rotation.z+=n*o}),e.scene.add(e.webCamvBoxMesh),e.preCubeCamRenderFns.push(function(){e.webCamvBoxMesh.visible=!0}),e.postCubeCamRenderFns.push(function(){e.webCamvBoxMesh.visible=!1}),n(e)})}function a(e){return W.promise(function(n,r){e.scene.add(new THREE.AmbientLight(2236962));var t=new THREE.DirectionalLight(16777215,2);t.position.set(2,1.2,10).normalize(),e.scene.add(t),t=new THREE.DirectionalLight(16777215,1),t.position.set(-2,1.2,-10).normalize(),e.scene.add(t),n(e)})}function o(e){return W.promise(function(n,r){function t(n){{var r=n.children[0],t=100,o=5,c=100;!function s(){if(a.length<t){var n=new i(r);e.swarmObject3D.add(n.anchor),a.push(n),setTimeout(s,W.map(a.length/t,0,1,c,o,W.interpolations.easeIn))}}()}}function i(e){this.velocity=W.randomBetween(.2,1),this.mesh=e.clone(),this.mesh.material=i.material.clone(),this.mesh.scale.x=i.initialScale,this.mesh.scale.y=i.initialScale,this.mesh.scale.z=i.initialScale;var n=100;this.mesh.position.set((Math.random()-.5)*n,(Math.random()-.5)*n,(Math.random()-.5)*n),this.anchor=new THREE.Object3D,this.anchor.add(this.mesh)}var a=[];e.swarmObject3D=new THREE.Object3D,e.scene.add(e.swarmObject3D),e.preCubeCamRenderFns.push(function(){e.swarmObject3D.visible=!1}),e.postCubeCamRenderFns.push(function(){e.swarmObject3D.visible=!0});var o=new THREE.OBJLoader;o.load("/obj/pillow-box.obj",t),s(e,function(e,n){a.forEach(function(r){return r.update(e,n)})}),i.material=new THREE.MeshPhongMaterial({color:16777215,shininess:0,specular:16777215,envMap:e.cubeCamera.renderTarget,reflectivity:1,side:THREE.DoubleSide}),i.initialScale=200,i.prototype.update=function(e,n){this.anchor.rotation.x+=.002,this.anchor.rotation.y+=this.velocity/10,this.anchor.rotation.z+=.001},n(e)})}function c(e){return W.promise(function(n,r){var t=0,i=0;!function a(n){window.requestAnimationFrame(a),i=n-t,t=n,e.preRenderFns.forEach(function(e){return e(i,n)}),e.renderer.clear(),e.renderer.render(e.scene,e.camera)}(t),n(e)})}function s(e,n){e.preRenderFns.push(n)}function u(e,n,r,t){e.camera.position.x=n,e.camera.position.y=r,e.camera.position.z=t}var d=W.composePromisers(n,r,t,i,o,a,c);return{makeApp:e,initApp:d}}();$(function(){$("[data-punter-viz]").toArray().map(function(e){var n=PunterViz.makeApp();n.containerEl=e,PunterViz.initApp(n).error(function(e){console.error("Failed to create Punter app",e)}).success(function(e){console.log("Punter application made")})})});
//# sourceMappingURL=data:application/json;base64,