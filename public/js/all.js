"use strict";function makeWebSocketClient(e){return W.promise(function(n,t){console.log("Connecting to websocket client:",e.wsUrl),e.wsClient=new W.JSONSocketConnection({socketUrl:e.wsUrl});var o=once(function(){$("[data-disconnected-warning]").remove(),report("CONNECTED","to:",e.wsUrl),n(e)});e.wsClient.on("open",o),e.wsClient.on("error",makeReporter("Web Socket Error")),e.wsClient.on("close",makeReporter("Web Socket Close")),e.wsClient.openSocketConnection()})}function addPunterCid(e){return W.promise(function(n,t){e.punterCid=$("[data-punter-cid]").data("punterCid"),n(e)})}function makePunterVizs(e){return W.promise(function(n,t){$("[data-punter-viz]").toArray().map(function(n){e.punterViz=PunterViz.makeViz(),e.punterViz.containerEl=n,e.punterViz.wsClient=e.wsClient;PunterViz.initViz(e.punterViz).error(function(e){console.error("Failed to create Punter app",e)}).success(function(n){if(window.location.search.indexOf("debug")>-1){var t=document.createElement("input");t.setAttribute("type","range"),t.setAttribute("min",-1),t.setAttribute("max",1),t.setAttribute("step",.01),t.setAttribute("value",.25),t.setAttribute("style","position: absolute"),$(t).asEventStream("change").map(function(e){return e.currentTarget}).map(function(e){return $(e).val()}).onValue(function(e){return PunterViz.setVelocity(n,null,e,null)}),$("#punter").prepend(t)}var o=25.714285714,r=$(window).asEventStream("deviceorientation").map(function(e){return[e.originalEvent.gamma,e.originalEvent.alpha,e.originalEvent.beta]}),i=r.map(function(e){return e[0]});r.onValue(function(e){console.log("updating",e),n.deviceRotation=e}),r.throttle(100).onValue(function(e){return PunterViz.setVelocity(n,null,W.map(e[0],-180,180,-1,1,!0),null)}),i.map(function(e){return-o>e?"backward":e>o?"forward":"none"}).skipDuplicates().throttle(100).onValue(function(n){"phone-"+e.punterCid===e.controlMode&&RestesqueUtil.post(e.wsClient,"/motor/rotation/direction/",n)}),i.map(function(e){return Math.abs(e)}).map(function(e){return e>90-o?"high":e>90-2*o?"medium":"low"}).throttle(100).onValue(function(n){"phone-"+e.punterCid===e.controlMode&&RestesqueUtil.post(e.wsClient,"/motor/rotation/speed/",n)}),console.log("Punter application made")})}),n(e)})}function makeRestRadioButtons(e){return W.promise(function(n,t){$('[data-rest-type="radio-post"]').toArray().map($).map(function(n){var t=n.parent();t.on("click touchend",function(t){return t.preventDefault(),console.log("sending",n.val(),"to",n.data("restUri")),RestesqueUtil.post(e.wsClient,n.data("restUri"),n.val()),!1})}),$('[data-rest-type="feildset"]').toArray().map($).map(function(n){function t(){RestesqueUtil.subscribeWithInitialGet(e.wsClient,n.data("restUri"),function(e){o.prop("checked",!1).checkboxradio("refresh").filter('input[value="'+e.getBody()+'"]').attr("checked","checked").checkboxradio("refresh").parent().find("label").removeClass("ui-radio-off").addClass("ui-radio-on")})}var o=n.find('input[type="radio"]').checkboxradio();console.log("Got a field set",n.data("restUri")),t(),e.wsClient.on("open",function(){console.log("Subscribnig:",n.data("restUri")),t()})}),n(e)})}function once(e){var n=!1;return function(){n||(e(),n=!0)}}function report(e,n){console.log("[",e,"]",W.rest(W.toArray(arguments)).join(" "))}function makeReporter(e,n){var t=arguments;return function(){report.apply(this,t);var e=arguments;return W.promise(function(n,t){n.apply(this,e)})}}var PunterViz=function(){function e(){return{containerEl:document.createElement("div"),backroundColor:6382180,velocity:[0,0,0],deviceRotation:[0,0,0],preRenderFns:[],preCubeCamRenderFns:[],postCubeCamRenderFns:[],wsClient:void 0}}function n(e){return W.promise(function(n,t){function o(){RestesqueUtil.subscribeWithInitialGet(app.wsClient,"/host/control/mode/",function(e){app.controlMode=e.getBody(),console.log("Control Mode Change to:",app.controlMode)})}e.controlMode="",o(),e.wsClient.on("open",o),n(e)})}function t(e){return W.promise(function(n,t){e.camera=new THREE.PerspectiveCamera(70,window.innerWidth/window.innerHeight,1,3e3),d(e,0,0,200),e.scene=new THREE.Scene,e.renderer=new THREE.WebGLRenderer({antialias:!1}),e.renderer.setPixelRatio(window.devicePixelRatio),e.renderer.setSize(window.innerWidth,window.innerHeight),e.renderer.setClearColor(e.backgroundColor),e.renderer.sortObjects=!1,e.containerEl.appendChild(e.renderer.domElement),n(e)})}function o(e){return W.promise(function(n,t){var o=document.createElement("video");o.autoplay=!0,navigator.webkitGetUserMedia({video:!0},function(e){o.src=URL.createObjectURL(e)},function(e){console.log("Failed to get a stream due to",e)}),e.webCamTexture=new THREE.Texture(o),e.webCamTexture.minFilter=THREE.LinearFilter,l(e,function(n,t){o.readyState===o.HAVE_ENOUGH_DATA&&(e.webCamTexture.needsUpdate=!0)}),n(e)})}function r(e){return W.promise(function(n,t){e.cubeCamera=new THREE.CubeCamera(1,3e3,256),e.cubeCamera.renderTarget.minFilter=THREE.LinearMipMapLinearFilter,l(e,function(n,t){e.preCubeCamRenderFns.forEach(function(e){return e(n,t)}),e.cubeCamera.updateCubeMap(e.renderer,e.scene),e.postCubeCamRenderFns.forEach(function(e){return e(n,t)})}),n(e)})}function i(e){return W.promise(function(n,t){e.webCamMaterial=new THREE.MeshBasicMaterial({map:e.webCamTexture,color:16777215,side:THREE.DoubleSide}),n(e)})}function a(e){return W.promise(function(n,t){function o(t){console.log(t.children[0]),e.webCamHedronMesh=t.children[0].clone(),e.webCamHedronMesh.material=e.webCamMaterial.clone();var o=2800;e.webCamHedronMesh.scale.set(o,o,o);var r=W.randomBetween(2e-4,2e-5),i=W.randomBetween(2e-4,2e-5),a=W.randomBetween(2e-4,2e-5);l(e,function(n,t){e.webCamHedronMesh.rotation.x+=n*r,e.webCamHedronMesh.rotation.y+=n*i,e.webCamHedronMesh.rotation.z+=n*a}),e.scene.add(e.webCamHedronMesh),e.preCubeCamRenderFns.push(function(){e.webCamHedronMesh.visible=!0,e.webCamHedronMesh.material.color.set(16777215)}),e.postCubeCamRenderFns.push(function(){e.webCamHedronMesh.visible=!0,e.webCamHedronMesh.material.color.set(7170113)}),n(e)}var r=new THREE.OBJLoader;r.load("/obj/hedron.obj",o)})}function s(e){return W.promise(function(n,t){e.scene.add(new THREE.AmbientLight(2236962));var o=new THREE.DirectionalLight(16777215,2);o.position.set(2,1.2,10).normalize(),e.scene.add(o),o=new THREE.DirectionalLight(16777215,1),o.position.set(-2,1.2,-10).normalize(),e.scene.add(o),n(e)})}function c(e){return W.promise(function(n,t){function o(e){this.positionScalar=W.interpolations.cubicEaseOut(Math.random());var n=o.initialScale*W.map(this.positionScalar,0,1,.4,1);this.mesh=e.clone(),this.anchor=new THREE.Object3D,this.anchor.add(this.mesh),this.mesh.material=o.material.clone(),this.mesh.scale.x=n,this.mesh.scale.y=n,this.mesh.scale.z=n;var t=60;this.mesh.position.set(t*(1-this.positionScalar),W.randomBetween(-50,50),0),this.mesh.rotation.x=W.randomBetween(-180,180),this.mesh.rotation.y=W.randomBetween(-180,180),this.mesh.rotation.z=W.randomBetween(-180,180),this.anchor.rotation.y+=W.randomBetween(-180,180)}function r(n){var t=n.children[0],r=100,a=5,s=20;!function c(){if(i.length<r){var n=new o(t);e.swarmObject3D.add(n.anchor),i.push(n),setTimeout(c,W.map(i.length/r,0,1,s,a,W.interpolations.easeIn))}}()}var i=[];e.swarmObject3D=new THREE.Object3D,e.scene.add(e.swarmObject3D),e.preCubeCamRenderFns.push(function(){e.swarmObject3D.visible=!1}),e.postCubeCamRenderFns.push(function(){e.swarmObject3D.visible=!0}),l(e,function(e,n){i.forEach(function(t){return t.update(e,n)})}),o.material=new THREE.MeshPhongMaterial({color:16777215,shininess:0,specular:16777215,envMap:e.cubeCamera.renderTarget,reflectivity:1,side:THREE.DoubleSide}),o.initialScale=300,o.prototype.update=function(n,t){this.anchor.rotation.x+=e.velocity[0]*(1-this.positionScalar)*.4,this.anchor.rotation.y+=e.velocity[1]*(1-this.positionScalar)*.4,this.anchor.rotation.z+=e.velocity[2]*(1-this.positionScalar)*.4,this.mesh.rotation.x+=.002,this.mesh.rotation.y+=.001,this.mesh.rotation.z+=.003};var a=new THREE.OBJLoader;a.load("/obj/pillow-box.obj",r),n(e)})}function u(e){return W.promise(function(n,t){var o=0,r=0;!function i(n){window.requestAnimationFrame(i),r=n-o,o=n,e.preRenderFns.forEach(function(e){return e(r,n)}),e.renderer.clear(),e.renderer.render(e.scene,e.camera)}(o),n(e)})}function l(e,n){return e.preRenderFns.push(n),e}function d(e,n,t,o){return e.camera.position.x=n,e.camera.position.y=t,e.camera.position.z=o,e}function p(e,n,t,o){return W.isDefined(n)&&null!==n&&(e.velocity[0]=n),W.isDefined(t)&&null!==t&&(e.velocity[1]=t),W.isDefined(o)&&null!==o&&(e.velocity[2]=o),e}var m=W.composePromisers(n,t,o,i,r,a,c,s,u);return{makeViz:e,initViz:m,setVelocity:p}}(),makeApp=function(){return{wsUrl:W.join("https:"===document.location.protocol?"wss://":"ws://",document.location.host,"/")}},initApp=W.composePromisers(makeWebSocketClient,addPunterCid,makePunterVizs,makeRestRadioButtons);$(function(){initApp(makeApp()).success(function(e){report("OK","TheWorkers.net"),window.app=e})});
//# sourceMappingURL=data:application/json;base64,