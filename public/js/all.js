"use strict";function makeWebSocketClient(e){return W.promise(function(n,t){console.log("Connecting to websocket client:",e.wsUrl),e.wsClient=new W.JSONSocketConnection({socketUrl:e.wsUrl});var o=once(function(){$("[data-disconnected-warning]").remove(),report("CONNECTED","to:",e.wsUrl),n(e)});e.wsClient.on("open",o),e.wsClient.on("error",makeReporter("Web Socket Error")),e.wsClient.on("close",makeReporter("Web Socket Close")),e.wsClient.openSocketConnection()})}function subscribeToHostControlMode(e){return W.promise(function(n,t){e.controlMode="",RestesqueUtil.subscribeWithInitialGet(e.wsClient,"/host/control/mode/",function(n){e.controlMode=n.getBody(),console.log("Control Mode Change to:",e.controlMode)}).success(function(){n(e)})})}function addPunterCid(e){return W.promise(function(n,t){e.punterCid=$("[data-punter-cid]").data("punterCid"),n(e)})}function makePunterVizs(e){return W.promise(function(n,t){$("[data-punter-viz]").toArray().map(function(n){e.punterViz=PunterViz.makeViz(),e.punterViz.containerEl=n;PunterViz.initViz(e.punterViz).error(function(e){console.error("Failed to create Punter app",e)}).success(function(n){if(window.location.search.indexOf("debug")>-1){var t=document.createElement("input");t.setAttribute("type","range"),t.setAttribute("min",-1),t.setAttribute("max",1),t.setAttribute("step",.01),t.setAttribute("value",.25),t.setAttribute("style","position: absolute"),$(t).asEventStream("change").map(function(e){return e.currentTarget}).map(function(e){return $(e).val()}).onValue(function(e){return PunterViz.setVelocity(n,null,e,null)}),$("#punter").prepend(t)}var o=25.714285714,r=$(window).asEventStream("deviceorientation").map(function(e){return[e.originalEvent.gamma,e.originalEvent.alpha,e.originalEvent.beta]}),i=r.map(function(e){return e[1]});r.throttle(300).onValue(function(e){return PunterViz.setVelocity(n,null,W.map(e[0],-180,180,-3,3,!0),null)}),i.map(function(e){return-o>e?"backward":e>o?"forward":"none"}).skipDuplicates().throttle(100).onValue(function(n){"phone-"+e.punterCid===e.controlMode&&RestesqueUtil.post(e.wsClient,"/motor/rotation/direction/",n)}),i.map(function(e){return Math.abs(e)}).map(function(e){return e>90-o?"high":e>90-2*o?"medium":"low"}).throttle(100).onValue(function(n){"phone-"+e.punterCid===e.controlMode&&RestesqueUtil.post(e.wsClient,"/motor/rotation/speed/",n)}),console.log("Punter application made")})}),n(e)})}function makeRestRadioButtons(e){return W.promise(function(n,t){$('[data-rest-type="radio-post"]').toArray().map($).map(function(n){var t=n.parent();t.on("click touchend",function(t){return t.preventDefault(),console.log("sending",n.val(),"to",n.data("restUri")),RestesqueUtil.post(e.wsClient,n.data("restUri"),n.val()),!1})}),$('[data-rest-type="feildset"]').toArray().map($).map(function(n){var t=n.find('input[type="radio"]').checkboxradio();console.log("got a field set",n.data("restUri")),RestesqueUtil.subscribeWithInitialGet(e.wsClient,n.data("restUri"),function(e){t.prop("checked",!1).checkboxradio("refresh").filter('input[value="'+e.getBody()+'"]').attr("checked","checked").checkboxradio("refresh").parent().find("label").removeClass("ui-radio-off").addClass("ui-radio-on")})}),n(e)})}function once(e){var n=!1;return function(){n||(e(),n=!0)}}function report(e,n){console.log("[",e,"]",W.rest(W.toArray(arguments)).join(" "))}function makeReporter(e,n){var t=arguments;return function(){report.apply(this,t);var e=arguments;return W.promise(function(n,t){n.apply(this,e)})}}var PunterViz=function(){function e(){return{containerEl:document.createElement("div"),backroundColor:6382180,velocity:[0,0,0],preRenderFns:[],preCubeCamRenderFns:[],postCubeCamRenderFns:[]}}function n(e){return W.promise(function(n,t){e.camera=new THREE.PerspectiveCamera(70,window.innerWidth/window.innerHeight,1,3e3),l(e,0,0,200),e.scene=new THREE.Scene,e.renderer=new THREE.WebGLRenderer({antialias:!1}),e.renderer.setPixelRatio(window.devicePixelRatio),e.renderer.setSize(window.innerWidth,window.innerHeight),e.renderer.setClearColor(e.backgroundColor),e.renderer.sortObjects=!1,e.containerEl.appendChild(e.renderer.domElement),n(e)})}function t(e){return W.promise(function(n,t){var o=document.createElement("video");o.autoplay=!0,navigator.webkitGetUserMedia({video:!0},function(e){o.src=URL.createObjectURL(e)},function(e){console.log("Failed to get a stream due to",e)}),e.webCamTexture=new THREE.Texture(o),e.webCamTexture.minFilter=THREE.LinearFilter,u(e,function(n,t){o.readyState===o.HAVE_ENOUGH_DATA&&(e.webCamTexture.needsUpdate=!0)}),n(e)})}function o(e){return W.promise(function(n,t){e.cubeCamera=new THREE.CubeCamera(1,3e3,256),e.cubeCamera.renderTarget.minFilter=THREE.LinearMipMapLinearFilter,u(e,function(n,t){e.preCubeCamRenderFns.forEach(function(e){return e(n,t)}),e.cubeCamera.updateCubeMap(e.renderer,e.scene),e.postCubeCamRenderFns.forEach(function(e){return e(n,t)})}),n(e)})}function r(e){return W.promise(function(n,t){e.webCamMaterial=new THREE.MeshBasicMaterial({map:e.webCamTexture,color:16777215,side:THREE.DoubleSide}),n(e)})}function i(e){return W.promise(function(n,t){function o(t){console.log(t.children[0]),e.webCamHedronMesh=t.children[0].clone(),e.webCamHedronMesh.material=e.webCamMaterial.clone();var o=2800;e.webCamHedronMesh.scale.set(o,o,o);var r=W.randomBetween(2e-4,2e-5),i=W.randomBetween(2e-4,2e-5),a=W.randomBetween(2e-4,2e-5);u(e,function(n,t){e.webCamHedronMesh.rotation.x+=n*r,e.webCamHedronMesh.rotation.y+=n*i,e.webCamHedronMesh.rotation.z+=n*a}),e.scene.add(e.webCamHedronMesh),e.preCubeCamRenderFns.push(function(){e.webCamHedronMesh.visible=!0,e.webCamHedronMesh.material.color.set(16777215)}),e.postCubeCamRenderFns.push(function(){e.webCamHedronMesh.visible=!0,e.webCamHedronMesh.material.color.set(7170113)}),n(e)}var r=new THREE.OBJLoader;r.load("/obj/hedron.obj",o)})}function a(e){return W.promise(function(n,t){e.scene.add(new THREE.AmbientLight(2236962));var o=new THREE.DirectionalLight(16777215,2);o.position.set(2,1.2,10).normalize(),e.scene.add(o),o=new THREE.DirectionalLight(16777215,1),o.position.set(-2,1.2,-10).normalize(),e.scene.add(o),n(e)})}function s(e){return W.promise(function(n,t){function o(e){this.velocity=[0,0,0],this.actualVelocity=[0,0,0],this.positionScalar=W.interpolations.cubicEaseOut(Math.random());var n=o.initialScale*W.map(this.positionScalar,0,1,.4,1);this.mesh=e.clone(),this.anchor=new THREE.Object3D,this.anchor.add(this.mesh),this.mesh.material=o.material.clone(),this.mesh.scale.x=n,this.mesh.scale.y=n,this.mesh.scale.z=n;var t=60;this.mesh.position.set(t*(1-this.positionScalar),W.randomBetween(-50,50),0),this.mesh.rotation.x=W.randomBetween(-180,180),this.mesh.rotation.y=W.randomBetween(-180,180),this.mesh.rotation.z=W.randomBetween(-180,180),this.anchor.rotation.y+=W.randomBetween(-180,180)}function r(n){var t=n.children[0],r=100,a=5,s=20;!function c(){if(i.length<r){var n=new o(t);e.swarmObject3D.add(n.anchor),i.push(n),setTimeout(c,W.map(i.length/r,0,1,s,a,W.interpolations.easeIn))}}()}var i=[];e.swarmObject3D=new THREE.Object3D,e.scene.add(e.swarmObject3D),e.preCubeCamRenderFns.push(function(){e.swarmObject3D.visible=!1}),e.postCubeCamRenderFns.push(function(){e.swarmObject3D.visible=!0}),u(e,function(e,n){i.forEach(function(t){return t.update(e,n)})}),o.material=new THREE.MeshPhongMaterial({color:16777215,shininess:0,specular:16777215,envMap:e.cubeCamera.renderTarget,reflectivity:1,side:THREE.DoubleSide}),o.initialScale=300,o.prototype.update=function(e,n){this.anchor.rotation.x+=this.velocity[0]*(1-this.positionScalar)*.4,this.anchor.rotation.y+=this.velocity[1]*(1-this.positionScalar)*.4,this.anchor.rotation.z+=this.velocity[2]*(1-this.positionScalar)*.4,this.mesh.rotation.x+=.002,this.mesh.rotation.y+=.001,this.mesh.rotation.z+=.003};var a=new THREE.OBJLoader;a.load("/obj/pillow-box.obj",r),n(e)})}function c(e){return W.promise(function(n,t){var o=0,r=0;!function i(n){window.requestAnimationFrame(i),r=n-o,o=n,e.preRenderFns.forEach(function(e){return e(r,n)}),e.renderer.clear(),e.renderer.render(e.scene,e.camera)}(o),n(e)})}function u(e,n){return e.preRenderFns.push(n),e}function l(e,n,t,o){return e.camera.position.x=n,e.camera.position.y=t,e.camera.position.z=o,e}function d(e,n,t,o){return W.isDefined(n)&&null!==n&&(e.velocity[0]=n),W.isDefined(t)&&null!==t&&(e.velocity[1]=t),W.isDefined(o)&&null!==o&&(e.velocity[2]=o),e}var m=W.composePromisers(n,t,r,o,i,s,a,c);return{makeViz:e,initViz:m,setVelocity:d}}(),makeApp=function(){return{wsUrl:W.join("https:"===document.location.protocol?"wss://":"ws://",document.location.host,"/")}},initApp=W.composePromisers(makeWebSocketClient,subscribeToHostControlMode,addPunterCid,makePunterVizs,makeRestRadioButtons);$(function(){initApp(makeApp()).success(function(e){report("OK","TheWorkers.net"),window.app=e})});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFsbC5qcyIsIm1haW4uanMiLCJwdW50ZXItdml6LmpzIl0sIm5hbWVzIjpbIm1ha2VXZWJTb2NrZXRDbGllbnQiLCJhcHAiLCJXIiwicHJvbWlzZSIsInJlc29sdmUiLCJyZWplY3QiLCJjb25zb2xlIiwibG9nIiwid3NVcmwiLCJ3c0NsaWVudCIsIkpTT05Tb2NrZXRDb25uZWN0aW9uIiwic29ja2V0VXJsIiwicmVzb2x2ZU9uRmlyc3RDb25uZWN0Iiwib25jZSIsIiQiLCJyZW1vdmUiLCJyZXBvcnQiLCJvbiIsIm1ha2VSZXBvcnRlciIsIm9wZW5Tb2NrZXRDb25uZWN0aW9uIiwic3Vic2NyaWJlVG9Ib3N0Q29udHJvbE1vZGUiLCJjb250cm9sTW9kZSIsIlJlc3Rlc3F1ZVV0aWwiLCJzdWJzY3JpYmVXaXRoSW5pdGlhbEdldCIsInBhY2tldCIsImdldEJvZHkiLCJzdWNjZXNzIiwiYWRkUHVudGVyQ2lkIiwicHVudGVyQ2lkIiwiZGF0YSIsIm1ha2VQdW50ZXJWaXpzIiwidG9BcnJheSIsIm1hcCIsImVsIiwicHVudGVyVml6IiwiUHVudGVyVml6IiwibWFrZVZpeiIsImNvbnRhaW5lckVsIiwiaW5pdFZpeiIsImVycm9yIiwiZXJyIiwidml6Iiwid2luZG93IiwibG9jYXRpb24iLCJzZWFyY2giLCJpbmRleE9mIiwicmFuZ2VFbCIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudCIsInNldEF0dHJpYnV0ZSIsImFzRXZlbnRTdHJlYW0iLCJldmVudCIsImN1cnJlbnRUYXJnZXQiLCJ2YWwiLCJvblZhbHVlIiwidiIsInNldFZlbG9jaXR5IiwicHJlcGVuZCIsInJvdGF0aW9uU3RlcCIsIm9yaWVudGF0aW9uU3RyZWFtIiwiZSIsIm9yaWdpbmFsRXZlbnQiLCJnYW1tYSIsImFscGhhIiwiYmV0YSIsImdhbW1hU3RyZWFtIiwiYXJyIiwidGhyb3R0bGUiLCJnIiwic2tpcER1cGxpY2F0ZXMiLCJkaXJlY3Rpb24iLCJwb3N0IiwiTWF0aCIsImFicyIsInNwZWVkIiwibWFrZVJlc3RSYWRpb0J1dHRvbnMiLCIkZWwiLCIkd3JhcHBlckVsIiwicGFyZW50IiwicHJldmVudERlZmF1bHQiLCJyYWRpb0VscyIsImZpbmQiLCJjaGVja2JveHJhZGlvIiwicHJvcCIsImZpbHRlciIsImF0dHIiLCJyZW1vdmVDbGFzcyIsImFkZENsYXNzIiwiZm4iLCJoYXNUcmlnZ2VyZWQiLCJzdGF0dXMiLCJzdHIiLCJyZXN0IiwiYXJndW1lbnRzIiwiam9pbiIsInJlcG9ydEFyZ3MiLCJhcHBseSIsInRoaXMiLCJjYWxsZWVBcmdzIiwiYmFja3JvdW5kQ29sb3IiLCJ2ZWxvY2l0eSIsInByZVJlbmRlckZucyIsInByZUN1YmVDYW1SZW5kZXJGbnMiLCJwb3N0Q3ViZUNhbVJlbmRlckZucyIsIm1ha2VDYW1lcmFTY2VuZVJlbmRlcmVyIiwiY2FtZXJhIiwiVEhSRUUiLCJQZXJzcGVjdGl2ZUNhbWVyYSIsImlubmVyV2lkdGgiLCJpbm5lckhlaWdodCIsInNldENhbWVyYVBvc2l0aW9uIiwic2NlbmUiLCJTY2VuZSIsInJlbmRlcmVyIiwiV2ViR0xSZW5kZXJlciIsImFudGlhbGlhcyIsInNldFBpeGVsUmF0aW8iLCJkZXZpY2VQaXhlbFJhdGlvIiwic2V0U2l6ZSIsInNldENsZWFyQ29sb3IiLCJiYWNrZ3JvdW5kQ29sb3IiLCJzb3J0T2JqZWN0cyIsImFwcGVuZENoaWxkIiwiZG9tRWxlbWVudCIsIm1ha2VXZWJDYW1UZXh0dXJlIiwid2ViQ2FtRWwiLCJhdXRvcGxheSIsIm5hdmlnYXRvciIsIndlYmtpdEdldFVzZXJNZWRpYSIsInZpZGVvIiwic3RyZWFtIiwic3JjIiwiVVJMIiwiY3JlYXRlT2JqZWN0VVJMIiwid2ViQ2FtVGV4dHVyZSIsIlRleHR1cmUiLCJtaW5GaWx0ZXIiLCJMaW5lYXJGaWx0ZXIiLCJhZGRQcmVSZW5kZXJGbiIsImRldGxhTVMiLCJ0aW1lc3RhbXBNUyIsInJlYWR5U3RhdGUiLCJIQVZFX0VOT1VHSF9EQVRBIiwibmVlZHNVcGRhdGUiLCJtYWtlQ3ViZUNhbSIsImN1YmVDYW1lcmEiLCJDdWJlQ2FtZXJhIiwicmVuZGVyVGFyZ2V0IiwiTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyIiwiZGVsdGFNUyIsImZvckVhY2giLCJ1cGRhdGVDdWJlTWFwIiwibWFrZVdlYkNhbU1hdGVyaWFsIiwid2ViQ2FtTWF0ZXJpYWwiLCJNZXNoQmFzaWNNYXRlcmlhbCIsImNvbG9yIiwic2lkZSIsIkRvdWJsZVNpZGUiLCJtYWtlV2ViQ2FtSGVkcm9uTWVzaCIsIm9uT2JqTG9hZGVkIiwib2JqIiwiY2hpbGRyZW4iLCJ3ZWJDYW1IZWRyb25NZXNoIiwiY2xvbmUiLCJtYXRlcmlhbCIsInNjYWxlIiwic2V0Iiwicm90YXRpb25YIiwicmFuZG9tQmV0d2VlbiIsInJvdGF0aW9uWSIsInJvdGF0aW9uWiIsInJvdGF0aW9uIiwieCIsInkiLCJ6IiwiYWRkIiwicHVzaCIsInZpc2libGUiLCJsb2FkZXIiLCJPQkpMb2FkZXIiLCJsb2FkIiwibWFrZUxpZ2h0cyIsIkFtYmllbnRMaWdodCIsImRpcmVjdGlvbmFsTGlnaHQiLCJEaXJlY3Rpb25hbExpZ2h0IiwicG9zaXRpb24iLCJub3JtYWxpemUiLCJtYWtlU3dhcm0iLCJQYXJ0aWNsZSIsIm1lc2giLCJhY3R1YWxWZWxvY2l0eSIsInBvc2l0aW9uU2NhbGFyIiwiaW50ZXJwb2xhdGlvbnMiLCJjdWJpY0Vhc2VPdXQiLCJyYW5kb20iLCJpbml0aWFsU2NhbGUiLCJhbmNob3IiLCJPYmplY3QzRCIsInJhbmdlTWF4WCIsIm1heFBhcnRpY2xlcyIsIm1pbkNyZWF0aW9uVGltZSIsIm1heENyZWF0aW9uVGltZU1TIiwiY3JlYXRlTW9yZSIsInBhcnRpY2xlcyIsImxlbmd0aCIsInBhcnRpY2xlIiwic3dhcm1PYmplY3QzRCIsInNldFRpbWVvdXQiLCJlYXNlSW4iLCJ1cGRhdGUiLCJNZXNoUGhvbmdNYXRlcmlhbCIsInNoaW5pbmVzcyIsInNwZWN1bGFyIiwiZW52TWFwIiwicmVmbGVjdGl2aXR5IiwicHJvdG90eXBlIiwibWFrZVJlbmRlckxvb3AiLCJsYXN0VGltZXN0YW1wTVMiLCJsb29wIiwiY3VycmVudFRpbWVzdGFtcE1TIiwicmVxdWVzdEFuaW1hdGlvbkZyYW1lIiwiY2xlYXIiLCJyZW5kZXIiLCJpc0RlZmluZWQiLCJjb21wb3NlUHJvbWlzZXJzIiwibWFrZUFwcCIsInByb3RvY29sIiwiaG9zdCIsImluaXRBcHAiXSwibWFwcGluZ3MiOiJBQVFBLFlDMEJBLFNBQVNBLHFCQUFzQkMsR0FDM0IsTUFBT0MsR0FBRUMsUUFBUyxTQUFXQyxFQUFTQyxHQUNsQ0MsUUFBUUMsSUFBSyxrQ0FBbUNOLEVBQUlPLE9BRXBEUCxFQUFJUSxTQUFXLEdBQUlQLEdBQUVRLHNCQUNqQkMsVUFBV1YsRUFBSU8sT0FHbkIsSUFBSUksR0FBd0JDLEtBQU0sV0FDOUJDLEVBQUcsK0JBQWdDQyxTQUNuQ0MsT0FBUSxZQUFhLE1BQU9mLEVBQUlPLE9BQ2hDSixFQUFTSCxJQUdiQSxHQUFJUSxTQUFTUSxHQUFJLE9BQVFMLEdBQ3pCWCxFQUFJUSxTQUFTUSxHQUFJLFFBQVNDLGFBQWMscUJBQ3hDakIsRUFBSVEsU0FBU1EsR0FBSSxRQUFTQyxhQUFjLHFCQUN4Q2pCLEVBQUlRLFNBQVNVLHlCQUlyQixRQUFTQyw0QkFBNkJuQixHQUNsQyxNQUFPQyxHQUFFQyxRQUFTLFNBQVdDLEVBQVNDLEdBQ2xDSixFQUFJb0IsWUFBYyxHQUNsQkMsY0FDS0Msd0JBQXlCdEIsRUFBSVEsU0FBVSxzQkFBdUIsU0FBV2UsR0FDdEV2QixFQUFJb0IsWUFBY0csRUFBT0MsVUFDekJuQixRQUFRQyxJQUFLLDBCQUEyQk4sRUFBSW9CLGVBRS9DSyxRQUFTLFdBQ050QixFQUFTSCxPQUt6QixRQUFTMEIsY0FBZTFCLEdBQ3BCLE1BQU9DLEdBQUVDLFFBQVMsU0FBV0MsRUFBU0MsR0FDbENKLEVBQUkyQixVQUFZZCxFQUFHLHFCQUFzQmUsS0FBTSxhQUMvQ3pCLEVBQVNILEtBT2pCLFFBQVM2QixnQkFBaUI3QixHQUN0QixNQUFPQyxHQUFFQyxRQUFTLFNBQVdDLEVBQVND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LElBQU1BIiwiZmlsZSI6ImFsbC5qcyIsInNvdXJjZXNDb250ZW50IjpbbnVsbCwiLyoganNoaW50IGVzbmV4dDogdHJ1ZSAqL1xuXG4vLyBNYWluLmpzXG4vLyA9PT09PT09XG4vLyBFbnRyeSBwb2ludCBvZiB0aGUgYXBwbGljYXRpb24uXG5cbi8vIE1ha2UgJiBJbml0XG4vLyA9PT09PT09PT09PVxuXG52YXIgbWFrZUFwcCA9IGZ1bmN0aW9uICgpIHtcbiAgICByZXR1cm4ge1xuICAgICAgICB3c1VybDogVy5qb2luKCBkb2N1bWVudC5sb2NhdGlvbi5wcm90b2NvbCA9PT0gJ2h0dHBzOicgPyAnd3NzOi8vJyA6ICd3czovLycsXG4gICAgICAgICAgICAgICAgICAgICAgIGRvY3VtZW50LmxvY2F0aW9uLmhvc3QsIC8vZG9jdW1lbnQuJy8vLycvLyd3c3M6Ly8xOTIuMTY4LjAuNzo3MDgwJ1xuICAgICAgICAgICAgICAgICAgICAgICAnLycgKVxuICAgIH07XG59O1xuXG52YXIgaW5pdEFwcCA9IFcuY29tcG9zZVByb21pc2VycyggbWFrZVdlYlNvY2tldENsaWVudCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBzdWJzY3JpYmVUb0hvc3RDb250cm9sTW9kZSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBhZGRQdW50ZXJDaWQsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFrZVB1bnRlclZpenMsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFrZVJlc3RSYWRpb0J1dHRvbnMgKTtcblxuJCggZnVuY3Rpb24gKCkge1xuICAgIGluaXRBcHAoIG1ha2VBcHAoKSApXG4gICAgLnN1Y2Nlc3MoIGZ1bmN0aW9uICggYXBwICkge1xuICAgICAgICByZXBvcnQoICdPSycsICdUaGVXb3JrZXJzLm5ldCcgKTtcbiAgICAgICAgd2luZG93LmFwcCA9IGFwcDtcbiAgICB9KTtcbn0pO1xuXG4vLyBQcm9taXNlcnNcbi8vID09PT09PT09PVxuXG5mdW5jdGlvbiBtYWtlV2ViU29ja2V0Q2xpZW50ICggYXBwICkge1xuICAgIHJldHVybiBXLnByb21pc2UoIGZ1bmN0aW9uICggcmVzb2x2ZSwgcmVqZWN0ICkge1xuICAgICAgICBjb25zb2xlLmxvZyggJ0Nvbm5lY3RpbmcgdG8gd2Vic29ja2V0IGNsaWVudDonLCBhcHAud3NVcmwgKTtcbiAgICAgICAgXG4gICAgICAgIGFwcC53c0NsaWVudCA9IG5ldyBXLkpTT05Tb2NrZXRDb25uZWN0aW9uKHtcbiAgICAgICAgICAgIHNvY2tldFVybDogYXBwLndzVXJsXG4gICAgICAgIH0pO1xuICAgICAgICBcbiAgICAgICAgdmFyIHJlc29sdmVPbkZpcnN0Q29ubmVjdCA9IG9uY2UoIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICQoICdbZGF0YS1kaXNjb25uZWN0ZWQtd2FybmluZ10nICkucmVtb3ZlKCk7XG4gICAgICAgICAgICByZXBvcnQoICdDT05ORUNURUQnLCAndG86JywgYXBwLndzVXJsICk7XG4gICAgICAgICAgICByZXNvbHZlKCBhcHAgKTtcbiAgICAgICAgfSk7XG5cbiAgICAgICAgYXBwLndzQ2xpZW50Lm9uKCAnb3BlbicsIHJlc29sdmVPbkZpcnN0Q29ubmVjdCApO1xuICAgICAgICBhcHAud3NDbGllbnQub24oICdlcnJvcicsIG1ha2VSZXBvcnRlciggJ1dlYiBTb2NrZXQgRXJyb3InICkgKTtcbiAgICAgICAgYXBwLndzQ2xpZW50Lm9uKCAnY2xvc2UnLCBtYWtlUmVwb3J0ZXIoICdXZWIgU29ja2V0IENsb3NlJyApICk7XG4gICAgICAgIGFwcC53c0NsaWVudC5vcGVuU29ja2V0Q29ubmVjdGlvbigpO1xuICAgIH0pO1xufVxuXG5mdW5jdGlvbiBzdWJzY3JpYmVUb0hvc3RDb250cm9sTW9kZSAoIGFwcCApIHtcbiAgICByZXR1cm4gVy5wcm9taXNlKCBmdW5jdGlvbiAoIHJlc29sdmUsIHJlamVjdCApIHtcbiAgICAgICAgYXBwLmNvbnRyb2xNb2RlID0gJyc7XG4gICAgICAgIFJlc3Rlc3F1ZVV0aWxcbiAgICAgICAgICAgIC5zdWJzY3JpYmVXaXRoSW5pdGlhbEdldCggYXBwLndzQ2xpZW50LCAnL2hvc3QvY29udHJvbC9tb2RlLycsIGZ1bmN0aW9uICggcGFja2V0ICkge1xuICAgICAgICAgICAgICAgIGFwcC5jb250cm9sTW9kZSA9IHBhY2tldC5nZXRCb2R5KCk7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coICdDb250cm9sIE1vZGUgQ2hhbmdlIHRvOicsIGFwcC5jb250cm9sTW9kZSApO1xuICAgICAgICAgICAgfSlcbiAgICAgICAgICAgIC5zdWNjZXNzKCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgcmVzb2x2ZSggYXBwICk7XG4gICAgICAgICAgICB9KTtcbiAgICB9KTtcbn1cblxuZnVuY3Rpb24gYWRkUHVudGVyQ2lkICggYXBwICkge1xuICAgIHJldHVybiBXLnByb21pc2UoIGZ1bmN0aW9uICggcmVzb2x2ZSwgcmVqZWN0ICkge1xuICAgICAgICBhcHAucHVudGVyQ2lkID0gJCggJ1tkYXRhLXB1bnRlci1jaWRdJyApLmRhdGEoICdwdW50ZXJDaWQnICk7XG4gICAgICAgIHJlc29sdmUoIGFwcCApO1xuICAgIH0pO1xufVxuXG4vLyBQdW50ZXIgVml6XG4vLyAtLS0tLS0tLS0tXG5cbmZ1bmN0aW9uIG1ha2VQdW50ZXJWaXpzICggYXBwICkge1xuICAgIHJldHVybiBXLnByb21pc2UoIGZ1bmN0aW9uICggcmVzb2x2ZSwgcmVqZWN0ICkge1xuICAgICAgICAkKCBcIltkYXRhLXB1bnRlci12aXpdXCIgKVxuICAgICAgICAgICAgLnRvQXJyYXkoKVxuICAgICAgICAgICAgLm1hcCggZnVuY3Rpb24gKCBlbCApIHtcbiAgICAgICAgICAgICAgICAvLyBNYWtlIHRoZSBwdW50ZXIgYXBwbGljYXRpb25cbiAgICAgICAgICAgICAgICBhcHAucHVudGVyVml6ID0gUHVudGVyVml6Lm1ha2VWaXooKTtcbiAgICAgICAgICAgICAgICAvLyBBZGQgb3V0IGRvbSBlbGVtZW50XG4gICAgICAgICAgICAgICAgYXBwLnB1bnRlclZpei5jb250YWluZXJFbCA9IGVsO1xuXG4gICAgICAgICAgICAgICAgLy8gSW5pdGFpbGlzZSBpdFxuXG4gICAgICAgICAgICAgICAgdmFyIEZPUldBUkRTX0hJR0ggPSBbIFsgJy8nIF0gXTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICBQdW50ZXJWaXpcbiAgICAgICAgICAgICAgICAgICAgLmluaXRWaXooIGFwcC5wdW50ZXJWaXogKVxuICAgICAgICAgICAgICAgICAgICAuZXJyb3IoIGZ1bmN0aW9uICggZXJyICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgY29uc29sZS5lcnJvciggJ0ZhaWxlZCB0byBjcmVhdGUgUHVudGVyIGFwcCcsIGVyciApO1xuICAgICAgICAgICAgICAgICAgICB9KSBcbiAgICAgICAgICAgICAgICAgICAgLnN1Y2Nlc3MoIGZ1bmN0aW9uICggdml6ICkge1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBEZXZpY2UgUm90YXRpb25cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vID09PT09PT09PT09PT09PVxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBOb24tTW9iaWxlIC8gRGVidWdcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgICAgICAgICAgICAgaWYgKCB3aW5kb3cubG9jYXRpb24uc2VhcmNoLmluZGV4T2YoICdkZWJ1ZycpID4gLTEgKSB7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBNYWtlXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgdmFyIHJhbmdlRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCAnaW5wdXQnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbC5zZXRBdHRyaWJ1dGUoICd0eXBlJywgJ3JhbmdlJyApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgIHJhbmdlRWwuc2V0QXR0cmlidXRlKCAnbWluJywgLTEgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZUVsLnNldEF0dHJpYnV0ZSggJ21heCcsIDEgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZUVsLnNldEF0dHJpYnV0ZSggJ3N0ZXAnLCAwLjAxICk7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgcmFuZ2VFbC5zZXRBdHRyaWJ1dGUoICd2YWx1ZScsIDAuMjUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICByYW5nZUVsLnNldEF0dHJpYnV0ZSggJ3N0eWxlJywgJ3Bvc2l0aW9uOiBhYnNvbHV0ZScgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoIHJhbmdlRWwgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAuYXNFdmVudFN0cmVhbSggJ2NoYW5nZScgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKCBldmVudCA9PiBldmVudC5jdXJyZW50VGFyZ2V0IClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCggZWwgPT4gJCggZWwgKS52YWwoKSApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vblZhbHVlKCB2ID0+IFB1bnRlclZpei5zZXRWZWxvY2l0eSggdml6LCBudWxsLCB2LCBudWxsICkgKTtcblxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICQoICcjcHVudGVyJyApLnByZXBlbmQoIHJhbmdlRWwgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gTW9iaWxlXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyAtLS0tLS1cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciByb3RhdGlvblN0ZXAgPSAyNS43MTQyODU3MTQ7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIEFkZCB0aGUgcm90YXRpb24gY29udHJvbHNcbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIGdhbW1hIHJpZ2h0IDkwLCBsZWZ0IC05MFxuICAgICAgICAgICAgICAgICAgICAgICAgdmFyIG9yaWVudGF0aW9uU3RyZWFtID0gICQoIHdpbmRvdyApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5hc0V2ZW50U3RyZWFtKCAnZGV2aWNlb3JpZW50YXRpb24nIClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCggZSA9PiBbIGUub3JpZ2luYWxFdmVudC5nYW1tYSwgZS5vcmlnaW5hbEV2ZW50LmFscGhhLCBlLm9yaWdpbmFsRXZlbnQuYmV0YSBdICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIHZhciBnYW1tYVN0cmVhbSA9IG9yaWVudGF0aW9uU3RyZWFtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCggYXJyID0+IGFyclsgMSBdICk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIG9yaWVudGF0aW9uU3RyZWFtXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnRocm90dGxlKCAzMDAgKVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5vblZhbHVlKCBhcnIgPT4gUHVudGVyVml6LnNldFZlbG9jaXR5KCB2aXosIG51bGwsICBXLm1hcCggYXJyWzBdLCAtMTgwLCAxODAsIC0zLCAzLCB0cnVlICksIG51bGwgKSApO1xuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBvcmllbnRhdGlvblN0cmVhbVxuICAgICAgICAgICAgICAgICAgICAgICAgLy8gICAgIC5vblZhbHVlKCBhcnIgPT4gdml6LmNhbWVyYS5yb3RhdGlvbi56ID0gYXJyWyAxIF0gKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIFxuXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBbIGJoLCBibSwgYmwsIG4sIGZsLCBmbSwgZmggXVxuICAgICAgICAgICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgICAgICAgICAvLyBGb3J3YXJkcyAmIEJhY2t3YXJkc1xuICAgICAgICAgICAgICAgICAgICAgICAgZ2FtbWFTdHJlYW1cbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAubWFwKCBmdW5jdGlvbiAoIGcgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggZyA8IC1yb3RhdGlvblN0ZXAgKSB7IHJldHVybiAnYmFja3dhcmQnOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgaWYgKCBnID4gcm90YXRpb25TdGVwICkgeyByZXR1cm4gJ2ZvcndhcmQnOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGVsc2UgeyByZXR1cm4gJ25vbmUnOyB9IFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIH0pXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLnNraXBEdXBsaWNhdGVzKClcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhyb3R0bGUoIDEwMCApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uVmFsdWUoIGZ1bmN0aW9uICggZGlyZWN0aW9uICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoICdwaG9uZS0nICsgYXBwLnB1bnRlckNpZCA9PT0gYXBwLmNvbnRyb2xNb2RlICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgUmVzdGVzcXVlVXRpbC5wb3N0KCBhcHAud3NDbGllbnQsICcvbW90b3Ivcm90YXRpb24vZGlyZWN0aW9uLycsIGRpcmVjdGlvbiApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICAgICAgICAgIC8vIFNwZWVkXG4gICAgICAgICAgICAgICAgICAgICAgICBnYW1tYVN0cmVhbVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgIC5tYXAoIGcgPT4gTWF0aC5hYnMoIGcgKSApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm1hcCggZnVuY3Rpb24gKCBnICkge1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBpZiAoIGcgPiA5MCAtIHJvdGF0aW9uU3RlcCApIHsgcmV0dXJuICdoaWdoJzsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIGlmICggZyA+IDkwIC0gKCByb3RhdGlvblN0ZXAgKiAyICkgKSB7IHJldHVybiAnbWVkaXVtJzsgfVxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBlbHNlIHsgcmV0dXJuICdsb3cnOyB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSlcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAudGhyb3R0bGUoIDEwMCApXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgLm9uVmFsdWUoIGZ1bmN0aW9uICggc3BlZWQgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIGlmICggJ3Bob25lLScgKyBhcHAucHVudGVyQ2lkID09PSBhcHAuY29udHJvbE1vZGUgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBSZXN0ZXNxdWVVdGlsLnBvc3QoIGFwcC53c0NsaWVudCwgJy9tb3Rvci9yb3RhdGlvbi9zcGVlZC8nLCBzcGVlZCApO1xuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICB9XG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnUHVudGVyIGFwcGxpY2F0aW9uIG1hZGUnICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgcmVzb2x2ZSggYXBwICk7XG4gICAgfSk7XG59XG5cbi8vIGpRdWVyeSBNb2JpbGUgVWkgQmluZGluZ3Ncbi8vIC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS1cblxuZnVuY3Rpb24gbWFrZVJlc3RSYWRpb0J1dHRvbnMgKCBhcHAgKSB7XG4gICAgcmV0dXJuIFcucHJvbWlzZSggZnVuY3Rpb24gKCByZXNvbHZlLCByZWplY3QgKSB7XG4gICAgICAgIC8vIFJhZGlvIEJ1dHRvbnNcbiAgICAgICAgLy8gPT09PT09PT09PT09PVxuICAgICAgICAkKCAnW2RhdGEtcmVzdC10eXBlPVwicmFkaW8tcG9zdFwiXScgKVxuICAgICAgICAgICAgLnRvQXJyYXkoKVxuICAgICAgICAgICAgLm1hcCggJCApXG4gICAgICAgICAgICAubWFwKCBmdW5jdGlvbiAoICRlbCApIHtcbiAgICAgICAgICAgICAgICAvLyBEaXNhYmxlIHJlYWwgZXZlbnRzXG4gICAgICAgICAgICAgICAgdmFyICR3cmFwcGVyRWwgPSAkZWwucGFyZW50KCk7XG4gICAgICAgICAgICAgICAgJHdyYXBwZXJFbC5vbiggJ2NsaWNrIHRvdWNoZW5kJywgZnVuY3Rpb24gKCBlICkge1xuICAgICAgICAgICAgICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAnc2VuZGluZycsJGVsLnZhbCgpLCAndG8nLCAkZWwuZGF0YSggJ3Jlc3RVcmknICkgICk7XG4gICAgICAgICAgICAgICAgICAgIFJlc3Rlc3F1ZVV0aWwucG9zdCggYXBwLndzQ2xpZW50LCAkZWwuZGF0YSggJ3Jlc3RVcmknICksICRlbC52YWwoKSApO1xuICAgICAgICAgICAgICAgICAgICByZXR1cm4gZmFsc2U7XG4gICAgICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAvLyBSYWRpbyBGaWVsZCBTZXRzXG4gICAgICAgIC8vID09PT09PT09PT09PT09PT1cbiAgICAgICAgJCggJ1tkYXRhLXJlc3QtdHlwZT1cImZlaWxkc2V0XCJdJyApXG4gICAgICAgICAgICAudG9BcnJheSgpXG4gICAgICAgICAgICAubWFwKCAkIClcbiAgICAgICAgICAgIC5tYXAoIGZ1bmN0aW9uICggJGVsICkge1xuXG4gICAgICAgICAgICAgICAgdmFyIHJhZGlvRWxzID0gJGVsLmZpbmQoICdpbnB1dFt0eXBlPVwicmFkaW9cIl0nICkuY2hlY2tib3hyYWRpbygpO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCAgJ2dvdCBhIGZpZWxkIHNldCcsICRlbC5kYXRhKCAncmVzdFVyaScgKSApO1xuICAgICAgICAgICAgICAgIFJlc3Rlc3F1ZVV0aWwuc3Vic2NyaWJlV2l0aEluaXRpYWxHZXQoIGFwcC53c0NsaWVudCwgJGVsLmRhdGEoICdyZXN0VXJpJyApLCBmdW5jdGlvbiAoIHBhY2tldCApIHtcbiAgICAgICAgICAgICAgICAgICAgcmFkaW9FbHNcbiAgICAgICAgICAgICAgICAgICAgICAgIC5wcm9wKCAnY2hlY2tlZCcsIGZhbHNlIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jaGVja2JveHJhZGlvKCAncmVmcmVzaCcgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmZpbHRlciggJ2lucHV0W3ZhbHVlPVwiJysgcGFja2V0LmdldEJvZHkoKSArJ1wiXScgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLmF0dHIoICdjaGVja2VkJywgJ2NoZWNrZWQnIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5jaGVja2JveHJhZGlvKCAncmVmcmVzaCcgKVxuICAgICAgICAgICAgICAgICAgICAgICAgLnBhcmVudCgpXG4gICAgICAgICAgICAgICAgICAgICAgICAuZmluZCggJ2xhYmVsJyApXG4gICAgICAgICAgICAgICAgICAgICAgICAucmVtb3ZlQ2xhc3MoICd1aS1yYWRpby1vZmYnIClcbiAgICAgICAgICAgICAgICAgICAgICAgIC5hZGRDbGFzcyggJ3VpLXJhZGlvLW9uJyApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgIFxuICAgICAgICByZXNvbHZlKCBhcHAgKTtcbiAgICB9KTtcbn1cblxuLy8gVXRpbHNcbi8vID09PT09XG5cbi8vIEZ1bmN0aW9uXG4vLyAtLS0tLS0tLVxuICAgIFxuZnVuY3Rpb24gb25jZSAoIGZuICkge1xuICAgIHZhciBoYXNUcmlnZ2VyZWQgPSBmYWxzZTtcbiAgICByZXR1cm4gZnVuY3Rpb24gKCkge1xuICAgICAgICBpZiAoICEgaGFzVHJpZ2dlcmVkICkge1xuICAgICAgICAgICAgZm4oKTtcbiAgICAgICAgICAgIGhhc1RyaWdnZXJlZCA9IHRydWU7XG4gICAgICAgIH1cbiAgICB9O1xufVxuXG4vLyBSZXBvcnRpbmdcbi8vIC0tLS0tLS0tLVxuXG5mdW5jdGlvbiByZXBvcnQoIHN0YXR1cywgc3RyICkge1xuICAgIGNvbnNvbGUubG9nKCAnWycsIHN0YXR1cywgJ10nLCBXLnJlc3QoIFcudG9BcnJheSggYXJndW1lbnRzICkgKS5qb2luKCAnICcgKSApO1xufVxuXG5mdW5jdGlvbiBtYWtlUmVwb3J0ZXIoIHN0YXR1cywgc3RyICkge1xuICAgIHZhciByZXBvcnRBcmdzID0gYXJndW1lbnRzO1xuICAgIHJldHVybiBmdW5jdGlvbiAoKSB7XG4gICAgICAgIHJlcG9ydC5hcHBseSggdGhpcywgcmVwb3J0QXJncyApO1xuICAgICAgICB2YXIgY2FsbGVlQXJncyA9IGFyZ3VtZW50cztcbiAgICAgICAgcmV0dXJuIFcucHJvbWlzZSggZnVuY3Rpb24gKCByZXNvbHZlLCByZWplY3QgKSB7XG4gICAgICAgICAgICByZXNvbHZlLmFwcGx5KCB0aGlzLCBjYWxsZWVBcmdzICk7XG4gICAgICAgIH0pO1xuICAgIH07XG59XG4iLCIvKiBqc2hpbnQgZXNuZXh0OiB0cnVlICovXG5cbi8vIFB1bnRlciBWaXpcbi8vID09PT09PT09PT1cbi8vIEEgdGhyZWUuanMgdmlzdWxpc2F0aW9uIHRvIGJlXG4vLyBydW4gb24gYW4gSFRDIHBob25lIGFuZCBjYXJyaWVkIGJ5XG4vLyBwdW50ZXJzIGludG8gdGhlIG1pcnJvciBib3guXG5cbnZhciBQdW50ZXJWaXogPSAoZnVuY3Rpb24gKCkge1xuXG4gICAgLy8gSW5pdCAmIG1ha2VcbiAgICAvLyA9PT09PT09PT09PVxuICAgIGZ1bmN0aW9uIG1ha2VWaXogKCkge1xuICAgICAgICByZXR1cm4ge1xuICAgICAgICAgICAgY29udGFpbmVyRWw6IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoICdkaXYnICksXG4gICAgICAgICAgICBiYWNrcm91bmRDb2xvcjogMHg2MTYyNjQsXG4gICAgICAgICAgICB2ZWxvY2l0eTogWyAwLCAwLCAwIF0sXG4gICAgICAgICAgICBwcmVSZW5kZXJGbnM6IFtdLFxuICAgICAgICAgICAgcHJlQ3ViZUNhbVJlbmRlckZuczogW10sXG4gICAgICAgICAgICBwb3N0Q3ViZUNhbVJlbmRlckZuczogW11cbiAgICAgICAgfTtcbiAgICB9XG5cbiAgICB2YXIgaW5pdFZpeiA9IFcuY29tcG9zZVByb21pc2VycyggbWFrZUNhbWVyYVNjZW5lUmVuZGVyZXIsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ha2VXZWJDYW1UZXh0dXJlLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICBtYWtlV2ViQ2FtTWF0ZXJpYWwsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ha2VDdWJlQ2FtLFxuICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAvLyBtYWtlV2ViQ2FtQm94TWVzaCxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFrZVdlYkNhbUhlZHJvbk1lc2gsXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgIG1ha2VTd2FybSxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFrZUxpZ2h0cyxcbiAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgICAgbWFrZVJlbmRlckxvb3AgKTtcblxuICAgIC8vIFByb21pc2Vyc1xuICAgIC8vID09PT09PT09PVxuXG4gICAgLy8gQ2FtZXJhLCBTY2VuZSwgUmVuZGVyZXJcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLVxuICAgIGZ1bmN0aW9uIG1ha2VDYW1lcmFTY2VuZVJlbmRlcmVyICggdml6ICkge1xuICAgICAgICByZXR1cm4gVy5wcm9taXNlKCBmdW5jdGlvbiAoIHJlc29sdmUsIHJlamVjdCApIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgLy8gQ2FtZXJhXG4gICAgICAgICAgICAvLyAtLS0tLS1cbiAgICAgICAgICAgIHZpei5jYW1lcmEgPSBuZXcgVEhSRUUuUGVyc3BlY3RpdmVDYW1lcmEoIDcwLCB3aW5kb3cuaW5uZXJXaWR0aCAvIHdpbmRvdy5pbm5lckhlaWdodCwgMSwgMzAwMCApO1xuICAgICAgICAgICAgc2V0Q2FtZXJhUG9zaXRpb24oIHZpeiwgMCwgMCwgMjAwICk7XG5cbiAgICAgICAgICAgIC8vIFNjZW5lXG4gICAgICAgICAgICAvLyAtLS0tLVxuICAgICAgICAgICAgdml6LnNjZW5lID0gbmV3IFRIUkVFLlNjZW5lKCk7XG5cbiAgICAgICAgICAgIC8vIFJlbmRlcmVyXG4gICAgICAgICAgICAvLyAtLS0tLS0tLVxuICAgICAgICAgICAgdml6LnJlbmRlcmVyID0gbmV3IFRIUkVFLldlYkdMUmVuZGVyZXIoIHsgYW50aWFsaWFzOiBmYWxzZSB9ICk7XG4gICAgICAgICAgICB2aXoucmVuZGVyZXIuc2V0UGl4ZWxSYXRpbyggd2luZG93LmRldmljZVBpeGVsUmF0aW8gKTtcbiAgICAgICAgICAgIHZpei5yZW5kZXJlci5zZXRTaXplKCB3aW5kb3cuaW5uZXJXaWR0aCwgd2luZG93LmlubmVySGVpZ2h0ICk7XG4gICAgICAgICAgICB2aXoucmVuZGVyZXIuc2V0Q2xlYXJDb2xvciggdml6LmJhY2tncm91bmRDb2xvciApO1xuICAgICAgICAgICAgdml6LnJlbmRlcmVyLnNvcnRPYmplY3RzID0gZmFsc2U7XG5cbiAgICAgICAgICAgIHZpei5jb250YWluZXJFbC5hcHBlbmRDaGlsZCggdml6LnJlbmRlcmVyLmRvbUVsZW1lbnQgKTtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgcmVzb2x2ZSggdml6ICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFdlYiBDYW1cbiAgICAvLyAtLS0tLS0tXG4gICAgLy8gTWFrZSB0aGUgd2ViIGNhbSBhdmFpbGFibGUgYXMgYSB0ZXh0dXJlXG4gICAgZnVuY3Rpb24gbWFrZVdlYkNhbVRleHR1cmUgKCB2aXogKSB7XG4gICAgICAgIHJldHVybiBXLnByb21pc2UoIGZ1bmN0aW9uICggcmVzb2x2ZSwgcmVqZWN0ICkge1xuXG4gICAgICAgICAgICAvLyBXZWIgQ2FtIERPTSBFbGVtZW50XG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICB2YXIgd2ViQ2FtRWwgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCd2aWRlbycpO1xuICAgICAgICAgICAgd2ViQ2FtRWwuYXV0b3BsYXkgPSB0cnVlO1xuXG4gICAgICAgICAgICAvLyBXZWIgQ2FtIFN0cmVhbVxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgIG5hdmlnYXRvci53ZWJraXRHZXRVc2VyTWVkaWEoIHsgdmlkZW86dHJ1ZSB9LCBmdW5jdGlvbiggc3RyZWFtICl7XG4gICAgICAgICAgICAgICAgd2ViQ2FtRWwuc3JjID0gVVJMLmNyZWF0ZU9iamVjdFVSTCggc3RyZWFtICk7XG4gICAgICAgICAgICB9LCBmdW5jdGlvbiggZXJyICl7XG4gICAgICAgICAgICAgICAgY29uc29sZS5sb2coXCJGYWlsZWQgdG8gZ2V0IGEgc3RyZWFtIGR1ZSB0b1wiLCBlcnIpO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFdlYiBDYW0gVGV4dHVyZVxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICB2aXoud2ViQ2FtVGV4dHVyZSA9IG5ldyBUSFJFRS5UZXh0dXJlKCB3ZWJDYW1FbCApO1xuICAgICAgICAgICAgdml6LndlYkNhbVRleHR1cmUubWluRmlsdGVyID0gVEhSRUUuTGluZWFyRmlsdGVyO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBSZW5kZXIgVXBkYXRlc1xuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgIGFkZFByZVJlbmRlckZuKCB2aXosIGZ1bmN0aW9uICggZGV0bGFNUywgdGltZXN0YW1wTVMgKSB7XG4gICAgICAgICAgICAgICAgaWYoIHdlYkNhbUVsLnJlYWR5U3RhdGUgPT09IHdlYkNhbUVsLkhBVkVfRU5PVUdIX0RBVEEgKXtcbiAgICAgICAgICAgICAgICAgICAgdml6LndlYkNhbVRleHR1cmUubmVlZHNVcGRhdGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXNvbHZlKCB2aXogKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gQ3ViZSBDYW1lcmFcbiAgICAvLyAtLS0tLS0tLS0tLVxuICAgIC8vIENyZWF0ZSBhIGN1YmUgY2FtIGZvciBhIGR5bmFtaWMgZW52TWFwLlxuICAgIC8vIFRoaXMgYWxzbyBlbmFibGVzIHR3byBob29rczogYHByZUN1YmVDYW1SZW5kZXJBY3Rpb25zYCAmIGBwb3N0Q3ViZUNhbVJlbmRlckFjdGlvbnNgXG4gICAgLy8gaW4gdGhlIHZpeiBmb3IgdGhhdCBvYmplY3QzRCBpbiB0aGUgc2NlbmUgY2FuIGJlIHR1cm5lZCBvbiBhbmQgb2ZmIGR1cmluZ1xuICAgIC8vIHRoZSB3ZWJjYW1zIHJlbmRlclxuICAgIGZ1bmN0aW9uIG1ha2VDdWJlQ2FtICggdml6ICkgeyBcbiAgICAgICAgcmV0dXJuIFcucHJvbWlzZSggZnVuY3Rpb24gKCByZXNvbHZlLCByZWplY3QgKSB7XG5cbiAgICAgICAgICAgIHZpei5jdWJlQ2FtZXJhID0gbmV3IFRIUkVFLkN1YmVDYW1lcmEoMSwgMzAwMCwgMjU2KTsgLy8gbmVhciwgZmFyLCByZXNvbHV0aW9uXG4gICAgICAgICAgICB2aXouY3ViZUNhbWVyYS5yZW5kZXJUYXJnZXQubWluRmlsdGVyID0gVEhSRUUuTGluZWFyTWlwTWFwTGluZWFyRmlsdGVyOyAvLyBtaXBtYXAgZmlsdGVyXG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGFkZFByZVJlbmRlckZuKCB2aXosIGZ1bmN0aW9uICggZGVsdGFNUywgdGltZXN0YW1wTVMgKSB7ICAgIFxuICAgICAgICAgICAgICAgIC8vIFJlbmRlciB0aGUgY3ViZSBjYW1lcmEgdG8gY3ViZSBtYXBcbiAgICAgICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAgICAgdml6LnByZUN1YmVDYW1SZW5kZXJGbnMuZm9yRWFjaCggZm4gPT4gZm4oIGRlbHRhTVMsIHRpbWVzdGFtcE1TICkgKTtcbiAgICAgICAgICAgICAgICB2aXouY3ViZUNhbWVyYS51cGRhdGVDdWJlTWFwKCB2aXoucmVuZGVyZXIsIHZpei5zY2VuZSApO1xuICAgICAgICAgICAgICAgIHZpei5wb3N0Q3ViZUNhbVJlbmRlckZucy5mb3JFYWNoKCBmbiA9PiBmbiggZGVsdGFNUywgdGltZXN0YW1wTVMgKSApO1xuICAgICAgICAgICAgfSk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIHJlc29sdmUoIHZpeiApO1xuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBXZWIgQ2FtIE1hdGVyaWFsXG4gICAgLy8gLS0tLS0tLS0tLS0tLS0tLVxuICAgIGZ1bmN0aW9uIG1ha2VXZWJDYW1NYXRlcmlhbCAoIHZpeiApIHtcbiAgICAgICAgcmV0dXJuIFcucHJvbWlzZSggZnVuY3Rpb24gKCByZXNvbHZlLCByZWplY3QgKSB7XG4gICAgICAgICAgICB2aXoud2ViQ2FtTWF0ZXJpYWwgPSBuZXcgVEhSRUUuTWVzaEJhc2ljTWF0ZXJpYWwoe1xuICAgICAgICAgICAgICAgIG1hcDogdml6LndlYkNhbVRleHR1cmUsXG4gICAgICAgICAgICAgICAgY29sb3I6IDB4ZmZmZmZmLFxuICAgICAgICAgICAgICAgIHNpZGU6IFRIUkVFLkRvdWJsZVNpZGVcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgcmVzb2x2ZSggdml6ICk7XG4gICAgICAgIH0pO1xuXG4gICAgfVxuXG4gICAgLy8gV2ViIENhbSBCb3ggTWVzaFxuICAgIC8vIC0tLS0tLS0tLS0tLS0tLS1cbiAgICAvLyBDcmVhdGVzIGEgYm94IHdpdGggdGhlIHdlYiBjYW0gZGlzcGxheWVkXG4gICAgLy8gb24gdGhlIGluc2lkZSBvZiBlYWNoIG9mIGl0J3MgNiBzaWRlc1xuICAgIGZ1bmN0aW9uIG1ha2VXZWJDYW1Cb3hNZXNoICggdml6ICkge1xuICAgICAgICByZXR1cm4gVy5wcm9taXNlKCBmdW5jdGlvbiAoIHJlc29sdmUsIHJlamVjdCApIHtcbiAgICAgICAgICAgIFxuICAgICAgICAgICAgdml6LndlYkNhbXZCb3hNZXNoID0gbmV3IFRIUkVFLk1lc2goIG5ldyBUSFJFRS5Cb3hHZW9tZXRyeSggMjAwMCwgMjAwMCwgMjAwMCApLCB2aXoud2ViQ2FtTWF0ZXJpYWwgKTtcblxuICAgICAgICAgICAgdmFyIHJvdGF0aW9uWCA9IFcucmFuZG9tQmV0d2VlbiggMC4wMDAyLCAwLjAwMDAyICk7XG4gICAgICAgICAgICB2YXIgcm90YXRpb25ZID0gVy5yYW5kb21CZXR3ZWVuKCAwLjAwMDIsIDAuMDAwMDIgKTtcbiAgICAgICAgICAgIHZhciByb3RhdGlvblogPSBXLnJhbmRvbUJldHdlZW4oIDAuMDAwMiwgMC4wMDAwMiApO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICAvLyBJZiB3ZSB3YW50IHRvIHJvdGF0ZSBpdFxuICAgICAgICAgICAgYWRkUHJlUmVuZGVyRm4oIHZpeiwgZnVuY3Rpb24gKCBkZWx0YU1TLCB0aW1lc3RhbXBNUyApIHtcbiAgICAgICAgICAgICAgICB2aXoud2ViQ2FtdkJveE1lc2gucm90YXRpb24ueCArPSAoIGRlbHRhTVMgKiByb3RhdGlvblggKTtcbiAgICAgICAgICAgICAgICB2aXoud2ViQ2FtdkJveE1lc2gucm90YXRpb24ueSArPSAoIGRlbHRhTVMgKiByb3RhdGlvblkgKTtcbiAgICAgICAgICAgICAgICB2aXoud2ViQ2FtdkJveE1lc2gucm90YXRpb24ueiArPSAoIGRlbHRhTVMgKiByb3RhdGlvblogKTtcbiAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2aXouc2NlbmUuYWRkKCB2aXoud2ViQ2FtdkJveE1lc2ggKTtcblxuICAgICAgICAgICAgLy8gU2hvdyBpdCBvbmx5IGZvciB0aGUgY3ViZSBjYW1cbiAgICAgICAgICAgIHZpei5wcmVDdWJlQ2FtUmVuZGVyRm5zLnB1c2goIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2aXoud2ViQ2FtdkJveE1lc2gudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgdml6LnBvc3RDdWJlQ2FtUmVuZGVyRm5zLnB1c2goIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2aXoud2ViQ2FtdkJveE1lc2gudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgcmVzb2x2ZSggdml6ICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFdlYiBDYW0gSGVkcm9uIE1lc2hcbiAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS0tXG4gICAgZnVuY3Rpb24gbWFrZVdlYkNhbUhlZHJvbk1lc2ggKCB2aXogKSB7XG4gICAgICAgIHJldHVybiBXLnByb21pc2UoIGZ1bmN0aW9uICggcmVzb2x2ZSwgcmVqZWN0ICkge1xuXG4gICAgICAgICAgICAvLyBMb2FkZXJcbiAgICAgICAgICAgIC8vIC0tLS0tLVxuICAgICAgICAgICAgdmFyIGxvYWRlciA9IG5ldyBUSFJFRS5PQkpMb2FkZXIoKTtcbiAgICAgICAgICAgIGxvYWRlci5sb2FkKCAnL29iai9oZWRyb24ub2JqJywgb25PYmpMb2FkZWQgKTtcblxuICAgICAgICAgICAgLy8gU3dhcm0gQ3JlYXRpb25cbiAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgIGZ1bmN0aW9uIG9uT2JqTG9hZGVkICggb2JqICkge1xuICAgICAgICAgICAgICAgIGNvbnNvbGUubG9nKCBvYmouY2hpbGRyZW5bIDAgXSApO1xuICAgICAgICAgICAgICAgIHZpei53ZWJDYW1IZWRyb25NZXNoID0gb2JqLmNoaWxkcmVuWyAwIF0uY2xvbmUoKTsgLy9uZXcgVEhSRUUuTWVzaCggbmV3IFRIUkVFLkJveEdlb21ldHJ5KCAyMDAwLCAyMDAwLCAyMDAwICksIG1hdGVyaWFsICk7XG4gICAgICAgICAgICAgICAgdml6LndlYkNhbUhlZHJvbk1lc2gubWF0ZXJpYWwgPSB2aXoud2ViQ2FtTWF0ZXJpYWwuY2xvbmUoKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICB2YXIgc2NhbGUgPSAyODAwO1xuICAgICAgICAgICAgICAgIHZpei53ZWJDYW1IZWRyb25NZXNoLnNjYWxlLnNldCggc2NhbGUsIHNjYWxlLCBzY2FsZSApO1xuXG4gICAgICAgICAgICAgICAgdmFyIHJvdGF0aW9uWCA9IFcucmFuZG9tQmV0d2VlbiggMC4wMDAyLCAwLjAwMDAyICk7XG4gICAgICAgICAgICAgICAgdmFyIHJvdGF0aW9uWSA9IFcucmFuZG9tQmV0d2VlbiggMC4wMDAyLCAwLjAwMDAyICk7XG4gICAgICAgICAgICAgICAgdmFyIHJvdGF0aW9uWiA9IFcucmFuZG9tQmV0d2VlbiggMC4wMDAyLCAwLjAwMDAyICk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy8gSWYgd2Ugd2FudCB0byByb3RhdGUgaXRcbiAgICAgICAgICAgICAgICBhZGRQcmVSZW5kZXJGbiggdml6LCBmdW5jdGlvbiAoIGRlbHRhTVMsIHRpbWVzdGFtcE1TICkge1xuICAgICAgICAgICAgICAgICAgICB2aXoud2ViQ2FtSGVkcm9uTWVzaC5yb3RhdGlvbi54ICs9ICggZGVsdGFNUyAqIHJvdGF0aW9uWCApO1xuICAgICAgICAgICAgICAgICAgICB2aXoud2ViQ2FtSGVkcm9uTWVzaC5yb3RhdGlvbi55ICs9ICggZGVsdGFNUyAqIHJvdGF0aW9uWSApO1xuICAgICAgICAgICAgICAgICAgICB2aXoud2ViQ2FtSGVkcm9uTWVzaC5yb3RhdGlvbi56ICs9ICggZGVsdGFNUyAqIHJvdGF0aW9uWiApO1xuICAgICAgICAgICAgICAgIH0pO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIHZpei5zY2VuZS5hZGQoIHZpei53ZWJDYW1IZWRyb25NZXNoICk7XG5cbiAgICAgICAgICAgICAgICAvLyBTaG93IGl0IG9ubHkgZm9yIHRoZSBjdWJlIGNhbVxuICAgICAgICAgICAgICAgIHZpei5wcmVDdWJlQ2FtUmVuZGVyRm5zLnB1c2goIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICAgICAgdml6LndlYkNhbUhlZHJvbk1lc2gudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICAgICAgICAgIHZpei53ZWJDYW1IZWRyb25NZXNoLm1hdGVyaWFsLmNvbG9yLnNldCggMHhmZmZmZmYgKTtcbiAgICAgICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgICAgIHZpei5wb3N0Q3ViZUNhbVJlbmRlckZucy5wdXNoKCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgICAgIHZpei53ZWJDYW1IZWRyb25NZXNoLnZpc2libGUgPSB0cnVlO1xuICAgICAgICAgICAgICAgICAgICB2aXoud2ViQ2FtSGVkcm9uTWVzaC5tYXRlcmlhbC5jb2xvci5zZXQoIDB4NmQ2ODQxICk7XG4gICAgICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgICAgICByZXNvbHZlKCB2aXogKTtcbiAgICAgICAgICAgIH1cbiAgICAgICAgICAgIFxuICAgICAgICB9KTtcbiAgICB9XG5cbiAgICAvLyBMaWdodHNcbiAgICAvLyAtLS0tLS1cbiAgICBmdW5jdGlvbiBtYWtlTGlnaHRzICggdml6ICkge1xuICAgICAgICByZXR1cm4gVy5wcm9taXNlKCBmdW5jdGlvbiAoIHJlc29sdmUsIHJlamVjdCApIHtcbiAgICAgICAgICAgIHZpei5zY2VuZS5hZGQoIG5ldyBUSFJFRS5BbWJpZW50TGlnaHQoIDB4MjIyMjIyICkgKTtcblxuICAgICAgICAgICAgdmFyIGRpcmVjdGlvbmFsTGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCggMHhmZmZmZmYsIDIgKTtcbiAgICAgICAgICAgIGRpcmVjdGlvbmFsTGlnaHQucG9zaXRpb24uc2V0KCAyLCAxLjIsIDEwICkubm9ybWFsaXplKCk7XG4gICAgICAgICAgICB2aXouc2NlbmUuYWRkKCBkaXJlY3Rpb25hbExpZ2h0ICk7XG5cbiAgICAgICAgICAgIGRpcmVjdGlvbmFsTGlnaHQgPSBuZXcgVEhSRUUuRGlyZWN0aW9uYWxMaWdodCggMHhmZmZmZmYsIDEgKTtcbiAgICAgICAgICAgIGRpcmVjdGlvbmFsTGlnaHQucG9zaXRpb24uc2V0KCAtMiwgMS4yLCAtMTAgKS5ub3JtYWxpemUoKTtcbiAgICAgICAgICAgIHZpei5zY2VuZS5hZGQoIGRpcmVjdGlvbmFsTGlnaHQgKTsgIFxuICAgICAgICAgICAgcmVzb2x2ZSggdml6ICk7XG4gICAgICAgIH0pO1xuICAgIH1cblxuICAgIC8vIFN3YXJtXG4gICAgLy8gLS0tLS1cbiAgICBmdW5jdGlvbiBtYWtlU3dhcm0gKCB2aXogKSB7XG4gICAgICAgIHJldHVybiBXLnByb21pc2UoIGZ1bmN0aW9uICggcmVzb2x2ZSwgcmVqZWN0ICkge1xuICAgICAgICAgICAgXG4gICAgICAgICAgICB2YXIgcGFydGljbGVzID0gW107XG5cbiAgICAgICAgICAgIC8vIEFkZCB0byBTY2VuZVxuICAgICAgICAgICAgLy8gLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICB2aXouc3dhcm1PYmplY3QzRCA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgICAgICAgICAgdml6LnNjZW5lLmFkZCggdml6LnN3YXJtT2JqZWN0M0QgKTtcbiAgICAgICAgICAgIHZpei5wcmVDdWJlQ2FtUmVuZGVyRm5zLnB1c2goIGZ1bmN0aW9uICgpIHtcbiAgICAgICAgICAgICAgICB2aXouc3dhcm1PYmplY3QzRC52aXNpYmxlID0gZmFsc2U7XG4gICAgICAgICAgICB9KTtcbiAgICAgICAgICAgIHZpei5wb3N0Q3ViZUNhbVJlbmRlckZucy5wdXNoKCBmdW5jdGlvbiAoKSB7XG4gICAgICAgICAgICAgICAgdml6LnN3YXJtT2JqZWN0M0QudmlzaWJsZSA9IHRydWU7XG4gICAgICAgICAgICB9KTtcblxuICAgICAgICAgICAgLy8gVXBkYXRpbmdcbiAgICAgICAgICAgIGFkZFByZVJlbmRlckZuKCB2aXosIGZ1bmN0aW9uICggZGVsdGFNUywgdGltZXN0YW1wTVMgKSB7XG4gICAgICAgICAgICAgICAgcGFydGljbGVzLmZvckVhY2goIHBhcnRpY2xlID0+IHBhcnRpY2xlLnVwZGF0ZSggZGVsdGFNUywgdGltZXN0YW1wTVMgKSApO1xuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIC8vIFBhcnRpY2xlIENsYXNzXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLVxuICAgICAgICAgICAgZnVuY3Rpb24gUGFydGljbGUgKCBtZXNoICkge1xuXG4gICAgICAgICAgICAgICAgdGhpcy52ZWxvY2l0eSA9IFsgMCwgMCwgMCBdO1xuICAgICAgICAgICAgICAgIHRoaXMuYWN0dWFsVmVsb2NpdHkgPSBbIDAsIDAsIDAgXTtcblxuICAgICAgICAgICAgICAgIC8vICMjIyBQb3NpdGlvbmluZ1xuICAgICAgICAgICAgICAgIHRoaXMucG9zaXRpb25TY2FsYXIgPSBXLmludGVycG9sYXRpb25zLmN1YmljRWFzZU91dCggTWF0aC5yYW5kb20oKSApO1xuICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgdmFyIHNjYWxlID0gUGFydGljbGUuaW5pdGlhbFNjYWxlICogVy5tYXAoIHRoaXMucG9zaXRpb25TY2FsYXIsIDAsIDEsIDAuNCwgMSApO1xuXG4gICAgICAgICAgICAgICAgLy8gTWVzaFxuICAgICAgICAgICAgICAgIHRoaXMubWVzaCA9IG1lc2guY2xvbmUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLmFuY2hvciA9IG5ldyBUSFJFRS5PYmplY3QzRCgpO1xuICAgICAgICAgICAgICAgIHRoaXMuYW5jaG9yLmFkZCggdGhpcy5tZXNoICk7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXNoLm1hdGVyaWFsID0gUGFydGljbGUubWF0ZXJpYWwuY2xvbmUoKTtcbiAgICAgICAgICAgICAgICB0aGlzLm1lc2guc2NhbGUueCA9IHNjYWxlO1xuICAgICAgICAgICAgICAgIHRoaXMubWVzaC5zY2FsZS55ID0gc2NhbGU7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXNoLnNjYWxlLnogPSBzY2FsZTtcblxuICAgICAgICAgICAgICAgIHZhciByYW5nZU1heFggPSA2MDtcblxuICAgICAgICAgICAgICAgIHRoaXMubWVzaC5wb3NpdGlvbi5zZXQoIHJhbmdlTWF4WCAqICgxIC0gdGhpcy5wb3NpdGlvblNjYWxhciksIFcucmFuZG9tQmV0d2VlbiggLTUwLCA1MCApLCAwICk7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgLy90aGlzLm1lc2gucG9zaXRpb24uc2V0KCByYW5nZU1heCAqIHBvc2l0aW9uU2NhbGFyLCAwLCAwICk7XG5cbiAgICAgICAgICAgICAgICB0aGlzLm1lc2gucm90YXRpb24ueCA9IFcucmFuZG9tQmV0d2VlbiggLTE4MCwgMTgwICk7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXNoLnJvdGF0aW9uLnkgPSBXLnJhbmRvbUJldHdlZW4oIC0xODAsIDE4MCApO1xuICAgICAgICAgICAgICAgIHRoaXMubWVzaC5yb3RhdGlvbi56ID0gVy5yYW5kb21CZXR3ZWVuKCAtMTgwLCAxODAgKTtcblxuICAgICAgICAgICAgICAgIHRoaXMuYW5jaG9yLnJvdGF0aW9uLnkgKz0gIFcucmFuZG9tQmV0d2VlbiggLTE4MCwgMTgwICk7XG5cbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyB2YXIgcmFuZ2UgPSAxMDA7XG4gICAgICAgICAgICAgICAgLy8gdGhpcy5tZXNoLnBvc2l0aW9uLnNldCggKCBNYXRoLnJhbmRvbSgpIC0gMC41ICkgKiByYW5nZSwgKCBNYXRoLnJhbmRvbSgpIC0gMC41ICkgKiByYW5nZSwgKCBNYXRoLnJhbmRvbSgpIC0gMC41ICkgKiByYW5nZSApO1xuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgICAgIFxuICAgICAgICAgICAgfVxuXG4gICAgICAgICAgICAvLyAjIyMgU3RhdGljXG4gICAgICAgICAgICBQYXJ0aWNsZS5tYXRlcmlhbCA9IG5ldyBUSFJFRS5NZXNoUGhvbmdNYXRlcmlhbCgge1xuICAgICAgICAgICAgICAgIGNvbG9yOiAweGZmZmZmZixcbiAgICAgICAgICAgICAgICBzaGluaW5lc3M6IDAuMCxcbiAgICAgICAgICAgICAgICBzcGVjdWxhcjogMHhmZmZmZmYsXG4gICAgICAgICAgICAgICAgZW52TWFwOiB2aXouY3ViZUNhbWVyYS5yZW5kZXJUYXJnZXQsXG4gICAgICAgICAgICAgICAgcmVmbGVjdGl2aXR5OiAxLjAsXG4gICAgICAgICAgICAgICAgc2lkZTogVEhSRUUuRG91YmxlU2lkZVxuICAgICAgICAgICAgfSk7XG5cbiAgICAgICAgICAgIFBhcnRpY2xlLmluaXRpYWxTY2FsZSA9IDMwMDtcblxuICAgICAgICAgICAgLy8gIyMjIE1ldGhvZFxuICAgICAgICAgICAgUGFydGljbGUucHJvdG90eXBlLnVwZGF0ZSA9IGZ1bmN0aW9uICggZGVsdGFNUywgdGltZXN0YW1wTVMgKSB7XG4gICAgICAgICAgICAgICAgdGhpcy5hbmNob3Iucm90YXRpb24ueCArPSB0aGlzLnZlbG9jaXR5WyAwIF0gKiAoIDEgLSB0aGlzLnBvc2l0aW9uU2NhbGFyICkgKiAwLjQ7XG4gICAgICAgICAgICAgICAgdGhpcy5hbmNob3Iucm90YXRpb24ueSArPSB0aGlzLnZlbG9jaXR5WyAxIF0gKiAoIDEgLSB0aGlzLnBvc2l0aW9uU2NhbGFyICkgKiAwLjQ7XG4gICAgICAgICAgICAgICAgdGhpcy5hbmNob3Iucm90YXRpb24ueiArPSB0aGlzLnZlbG9jaXR5WyAyIF0gKiAoIDEgLSB0aGlzLnBvc2l0aW9uU2NhbGFyICkgKiAwLjQ7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXNoLnJvdGF0aW9uLnggKz0gMC4wMDI7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXNoLnJvdGF0aW9uLnkgKz0gMC4wMDE7XG4gICAgICAgICAgICAgICAgdGhpcy5tZXNoLnJvdGF0aW9uLnogKz0gMC4wMDM7XG4gICAgICAgICAgICB9O1xuXG4gICAgICAgICAgICAvLyBMb2FkZXJcbiAgICAgICAgICAgIC8vIC0tLS0tLVxuICAgICAgICAgICAgdmFyIGxvYWRlciA9IG5ldyBUSFJFRS5PQkpMb2FkZXIoKTtcbiAgICAgICAgICAgIGxvYWRlci5sb2FkKCAnL29iai9waWxsb3ctYm94Lm9iaicsIG9uT2JqTG9hZGVkICk7XG5cbiAgICAgICAgICAgIC8vIFN3YXJtIENyZWF0aW9uXG4gICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICBmdW5jdGlvbiBvbk9iakxvYWRlZCAoIG9iaiApIHtcblxuICAgICAgICAgICAgICAgIHZhciBtZXNoID0gb2JqLmNoaWxkcmVuWyAwIF07XG5cbiAgICAgICAgICAgICAgICAvLyBQYXJ0aWNsZSBDcmVhdGlvblxuICAgICAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tLS0tLS0tXG4gICAgICAgICAgICAgICAgLy8gRWFzZSBpbiB0aGUgY3JlYXRpb24gb2YgdGhlIHBhcnRpY2xlc1xuICAgICAgICAgICAgICAgIHZhciBtYXhQYXJ0aWNsZXMgPSAxMDA7XG4gICAgICAgICAgICAgICAgdmFyIG1pbkNyZWF0aW9uVGltZSA9IDU7XG4gICAgICAgICAgICAgICAgdmFyIG1heENyZWF0aW9uVGltZU1TID0gMjA7XG4gICAgICAgICAgICAgICAgXG4gICAgICAgICAgICAgICAgKGZ1bmN0aW9uIGNyZWF0ZU1vcmUgKCkge1xuICAgICAgICAgICAgICAgICAgICBpZiAoIHBhcnRpY2xlcy5sZW5ndGggPCBtYXhQYXJ0aWNsZXMgKSB7XG4gICAgICAgICAgICAgICAgICAgICAgICB2YXIgcGFydGljbGUgPSBuZXcgUGFydGljbGUoIG1lc2ggKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHZpei5zd2FybU9iamVjdDNELmFkZCggcGFydGljbGUuYW5jaG9yICk7XG4gICAgICAgICAgICAgICAgICAgICAgICBwYXJ0aWNsZXMucHVzaCggcGFydGljbGUgKTtcbiAgICAgICAgICAgICAgICAgICAgICAgIHNldFRpbWVvdXQoIGNyZWF0ZU1vcmUsIFcubWFwKCBwYXJ0aWNsZXMubGVuZ3RoIC8gbWF4UGFydGljbGVzLCAwLCAxLCBtYXhDcmVhdGlvblRpbWVNUywgbWluQ3JlYXRpb25UaW1lLCBXLmludGVycG9sYXRpb25zLmVhc2VJbiApICk7XG4gICAgICAgICAgICAgICAgICAgIH1cbiAgICAgICAgICAgICAgICB9KCkpO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXNvbHZlKCB2aXogKTtcbiAgICAgICAgfSk7XG4gICAgfVxuXG4gICAgLy8gUmVuZGVyIExvb3BcbiAgICAvLyAtLS0tLS0tLS0tLVxuICAgIGZ1bmN0aW9uIG1ha2VSZW5kZXJMb29wICggdml6ICkge1xuICAgICAgICByZXR1cm4gVy5wcm9taXNlKCBmdW5jdGlvbiAoIHJlc29sdmUsIHJlamVjdCApIHtcblxuICAgICAgICAgICAgdmFyIGxhc3RUaW1lc3RhbXBNUyA9IDA7XG4gICAgICAgICAgICB2YXIgZGVsdGFNUyA9IDA7XG5cbiAgICAgICAgICAgIChmdW5jdGlvbiAgbG9vcCAoIGN1cnJlbnRUaW1lc3RhbXBNUyApIHtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBSZWN1clxuICAgICAgICAgICAgICAgIC8vIC0tLS0tXG4gICAgICAgICAgICAgICAgd2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggbG9vcCApO1xuXG4gICAgICAgICAgICAgICAgLy8gVXBkYXRlIHRpbWVzdGFtcHNcbiAgICAgICAgICAgICAgICAvLyAtLS0tLS0tLS0tLS0tLS0tLS1cbiAgICAgICAgICAgICAgICBkZWx0YU1TID0gY3VycmVudFRpbWVzdGFtcE1TIC0gbGFzdFRpbWVzdGFtcE1TO1xuICAgICAgICAgICAgICAgIGxhc3RUaW1lc3RhbXBNUyA9IGN1cnJlbnRUaW1lc3RhbXBNUztcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBBY3Rpb25hYmxlc1xuICAgICAgICAgICAgICAgIC8vIC0tLS0tLS0tLS0tXG4gICAgICAgICAgICAgICAgdml6LnByZVJlbmRlckZucy5mb3JFYWNoKCBmbiA9PiBmbiggZGVsdGFNUywgY3VycmVudFRpbWVzdGFtcE1TICkgKTtcbiAgICAgICAgICAgICAgICBcbiAgICAgICAgICAgICAgICAvLyBSZW5kZXJcbiAgICAgICAgICAgICAgICAvLyAtLS0tLS1cbiAgICAgICAgICAgICAgICB2aXoucmVuZGVyZXIuY2xlYXIoKTtcbiAgICAgICAgICAgICAgICB2aXoucmVuZGVyZXIucmVuZGVyKCB2aXouc2NlbmUsIHZpei5jYW1lcmEgKTtcblxuICAgICAgICAgICAgfSggbGFzdFRpbWVzdGFtcE1TICkpO1xuICAgICAgICAgICAgXG4gICAgICAgICAgICByZXNvbHZlKCB2aXogKTtcbiAgICAgICAgfSk7XG5cbiAgICB9XG5cbiAgICAvLyBVdGlsc1xuICAgIC8vID09PT09XG5cbiAgICAvLyBSZW5kZXIgTG9vcFxuICAgIC8vIC0tLS0tLS0tLS0tXG4gICAgZnVuY3Rpb24gYWRkUHJlUmVuZGVyRm4gKCB2aXosIGZuICkge1xuICAgICAgICB2aXoucHJlUmVuZGVyRm5zLnB1c2goIGZuICk7XG4gICAgICAgIHJldHVybiB2aXo7XG4gICAgfVxuXG4gICAgLy8gQ2FtZXJhXG4gICAgLy8gLS0tLS0tXG4gICAgZnVuY3Rpb24gc2V0Q2FtZXJhUG9zaXRpb24gKCB2aXosIHgsIHksIHogKSB7XG4gICAgICAgIHZpei5jYW1lcmEucG9zaXRpb24ueCA9IHg7XG4gICAgICAgIHZpei5jYW1lcmEucG9zaXRpb24ueSA9IHk7XG4gICAgICAgIHZpei5jYW1lcmEucG9zaXRpb24ueiA9IHo7XG4gICAgICAgIHJldHVybiB2aXo7XG4gICAgfVxuXG4gICAgZnVuY3Rpb24gc2V0VmVsb2NpdHkgKCB2aXosIHgsIHksIHogKSB7XG4gICAgICAgIGlmICggVy5pc0RlZmluZWQoIHggKSAmJiB4ICE9PSBudWxsICkgeyB2aXoudmVsb2NpdHlbIDAgXSA9IHg7IH1cbiAgICAgICAgaWYgKCBXLmlzRGVmaW5lZCggeSApICYmIHkgIT09IG51bGwgKSB7IHZpei52ZWxvY2l0eVsgMSBdID0geTsgfVxuICAgICAgICBpZiAoIFcuaXNEZWZpbmVkKCB6ICkgJiYgeiAhPT0gbnVsbCApIHsgdml6LnZlbG9jaXR5WyAyIF0gPSB6OyB9XG4gICAgICAgIHJldHVybiB2aXo7XG4gICAgfVxuICAgIFxuICAgIC8vIEV4cG9ydFxuICAgIC8vID09PT09PSAgICBcbiAgICByZXR1cm4ge1xuICAgICAgICBtYWtlVml6OiBtYWtlVml6LFxuICAgICAgICBpbml0Vml6OiBpbml0Vml6LFxuICAgICAgICBzZXRWZWxvY2l0eTogc2V0VmVsb2NpdHlcbiAgICB9O1xuICAgIFxufSgpKTtcblxuXG5cblxuXG5cbiJdLCJzb3VyY2VSb290IjoiL3NvdXJjZS8ifQ==