"use strict";function makeWebSocketClient(e){return W.promise(function(t,n){console.log("Connecting to websocket client:",e.wsUrl),e.wsClient=new W.JSONSocketConnection({socketUrl:e.wsUrl});var o=once(function(){$("[data-disconnected-warning]").remove(),report("CONNECTED","to:",e.wsUrl),t(e)});e.wsClient.on("open",o),e.wsClient.on("error",makeReporter("Web Socket Error")),e.wsClient.on("close",makeReporter("Web Socket Close")),e.wsClient.openSocketConnection()})}function addPunterCid(e){return W.promise(function(t,n){e.punterCid=$("[data-punter-cid]").data("punterCid"),t(e)})}function makePunterVizs(e){return W.promise(function(t,n){$("[data-punter-viz]").toArray().map(function(t){e.punterViz=PunterViz.makeViz(),e.punterViz.containerEl=t,e.punterViz.wsClient=e.wsClient;PunterViz.initViz(e.punterViz).error(function(e){console.error("Failed to create Punter app",e)}).success(function(t){if(window.location.search.indexOf("debug")>-1){var n=document.createElement("input");n.setAttribute("type","range"),n.setAttribute("min",-1),n.setAttribute("max",1),n.setAttribute("step",.01),n.setAttribute("value",.25),n.setAttribute("style","position: absolute"),$(n).asEventStream("change").map(function(e){return e.currentTarget}).map(function(e){return $(e).val()}).onValue(function(e){return PunterViz.setVelocity(t,null,e,null)}),$("#punter").prepend(n)}var o=25.714285714,r=$(window).asEventStream("deviceorientation").map(function(e){return[e.originalEvent.gamma,e.originalEvent.alpha,e.originalEvent.beta]}),i=r.map(function(e){return e[0]});r.onValue(function(e){console.log("updating",e),t.deviceRotation=e}),r.throttle(100).onValue(function(e){return PunterViz.setVelocity(t,null,W.map(e[0],-180,180,1,-1,!0),null)}),i.map(function(e){return-o>e?"forward":e>o?"backward":"none"}).skipDuplicates().throttle(100).onValue(function(t){"phone-"+e.punterCid===e.controlMode&&RestesqueUtil.post(e.wsClient,"/motor/rotation/direction/",t)}),i.map(function(e){return Math.abs(e)}).map(function(e){return e>90-o?"high":e>90-2*o?"medium":"low"}).throttle(100).onValue(function(t){"phone-"+e.punterCid===e.controlMode&&RestesqueUtil.post(e.wsClient,"/motor/rotation/speed/",t)}),console.log("Punter application made")})}),t(e)})}function makeRestRadioButtons(e){return W.promise(function(t,n){$('[data-rest-type="radio-post"]').toArray().map($).map(function(t){var n=t.parent();n.on("click touchend",function(n){return n.preventDefault(),console.log("sending",t.val(),"to",t.data("restUri")),RestesqueUtil.post(e.wsClient,t.data("restUri"),t.val()),!1})}),$('[data-rest-type="feildset"]').toArray().map($).map(function(t){function n(){RestesqueUtil.subscribeWithInitialGet(e.wsClient,t.data("restUri"),function(e){o.prop("checked",!1).checkboxradio("refresh").filter('input[value="'+e.getBody()+'"]').attr("checked","checked").checkboxradio("refresh").parent().find("label").removeClass("ui-radio-off").addClass("ui-radio-on")})}var o=t.find('input[type="radio"]').checkboxradio();console.log("Got a field set",t.data("restUri")),n(),e.wsClient.on("open",function(){console.log("Subscribnig:",t.data("restUri")),n()})}),t(e)})}function once(e){var t=!1;return function(){t||(e(),t=!0)}}function report(e,t){console.log("[",e,"]",W.rest(W.toArray(arguments)).join(" "))}function makeReporter(e,t){var n=arguments;return function(){report.apply(this,n);var e=arguments;return W.promise(function(t,n){t.apply(this,e)})}}var PunterViz=function(){function e(){return{containerEl:document.createElement("div"),backroundColor:6382180,velocity:[0,0,0],deviceRotation:[0,0,0],preRenderFns:[],preCubeCamRenderFns:[],postCubeCamRenderFns:[],wsClient:void 0,height:640,width:360,swarmColor:new THREE.Color(16777215),backgroundColor:new THREE.Color(10866508)}}function t(e){return W.promise(function(t,n){function o(){RestesqueUtil.subscribeWithInitialGet(app.wsClient,"/host/control/mode/",function(e){app.controlMode=e.getBody(),console.log("Control Mode Change to:",app.controlMode)})}e.controlMode="",o(),e.wsClient.on("open",o),t(e)})}function n(e){return W.promise(function(t,n){e.camera=new THREE.PerspectiveCamera(70,e.width/e.height,1,3e4),m(e,0,0,200),e.scene=new THREE.Scene,e.renderer=new THREE.WebGLRenderer({antialias:!1}),e.renderer.setPixelRatio(window.devicePixelRatio),e.renderer.setSize(e.width,e.height),e.renderer.setClearColor(e.backgroundColor),e.renderer.sortObjects=!1,e.containerEl.appendChild(e.renderer.domElement),t(e)})}function o(e){return W.promise(function(t,n){var o=document.createElement("video");o.autoplay=!0,navigator.webkitGetUserMedia({video:!0},function(e){o.src=URL.createObjectURL(e)},function(e){console.log("Failed to get a stream due to",e)}),e.webCamTexture=new THREE.Texture(o),e.webCamTexture.minFilter=THREE.LinearFilter,d(e,function(t,n){o.readyState===o.HAVE_ENOUGH_DATA&&(e.webCamTexture.needsUpdate=!0)}),t(e)})}function r(e){return W.promise(function(t,n){e.cubeCamera=new THREE.CubeCamera(1,3e4,256),e.cubeCamera.renderTarget.minFilter=THREE.LinearMipMapLinearFilter,d(e,function(t,n){e.preCubeCamRenderFns.forEach(function(e){return e(t,n)}),e.cubeCamera.updateCubeMap(e.renderer,e.scene),e.postCubeCamRenderFns.forEach(function(e){return e(t,n)})}),t(e)})}function i(e){return W.promise(function(t,n){e.webCamMaterial=new THREE.MeshBasicMaterial({map:e.webCamTexture,color:16777215,side:THREE.DoubleSide}),t(e)})}function a(e){return W.promise(function(t,n){var o=THREE.ImageUtils.loadTexture("/image/billboard-background.png");o.minFilter=THREE.NearestFilter,o.magFiler=THREE.NearestFilter;var r=new THREE.MeshBasicMaterial({map:o,color:16777215,transparent:!0}),i=new THREE.PlaneBufferGeometry(360,640),a=new THREE.Mesh(i,r);a.translateZ(-250),e.scene.add(a),e.preCubeCamRenderFns.push(function(){a.visible=!1}),e.postCubeCamRenderFns.push(function(){a.visible=!0}),t(e)})}function s(e){return W.promise(function(t,n){function o(n){console.log(n.children[0]),e.webCamHedronMesh=n.children[0].clone(),e.webCamHedronMesh.material=e.webCamMaterial.clone();var o=6e3;e.webCamHedronMesh.scale.set(o,o,o);W.randomBetween(2e-4,2e-5),W.randomBetween(2e-4,2e-5),W.randomBetween(2e-4,2e-5);d(e,function(t,n){e.webCamHedronMesh.rotation.x+=.5*e.velocity[0],e.webCamHedronMesh.rotation.y+=.5*e.velocity[1],e.webCamHedronMesh.rotation.z+=.5*e.velocity[2]}),e.scene.add(e.webCamHedronMesh),e.preCubeCamRenderFns.push(function(){e.webCamHedronMesh.visible=!0,e.webCamHedronMesh.wireframe=!1,e.webCamHedronMesh.material.color.set(16777215)}),e.postCubeCamRenderFns.push(function(){e.webCamHedronMesh.visible=!0,e.webCamHedronMesh.material.color.set(e.backgroundColor)}),t(e)}var r=new THREE.OBJLoader;r.load("/obj/hedron.obj",o)})}function c(e){return W.promise(function(t,n){e.scene.add(new THREE.AmbientLight(2236962));var o=new THREE.DirectionalLight(16777215,2);o.position.set(2,1.2,10).normalize(),e.scene.add(o),o=new THREE.DirectionalLight(16777215,1),o.position.set(-2,1.2,-10).normalize(),e.scene.add(o),t(e)})}function u(e){return W.promise(function(t,n){function o(t){function n(e){return.0174532925*e}this.velocity=[0,0,0],this.mesh=t.clone(),this.anchor=new THREE.Object3D,this.anchor.add(this.mesh),this.mesh.material=o.material.clone(),this.mesh.material.color=e.swarmColor;var r=70;this.mesh.translateX(W.randomBetween(-r,r)),this.mesh.translateY(W.randomBetween(-r,r)),this.mesh.translateZ(W.randomBetween(-r,r)),this.distance=W.map(this.mesh.position.distanceTo(this.anchor.position),0,r,1,.1,!0);var i=250,a=W.interpolations.quarticEaseOut(this.distance);this.mesh.scale.set(a*i/2,a*i/2,a*i);var s=n(180);this.mesh.rotation.x=W.randomBetween(-s,s),this.mesh.rotation.y=W.randomBetween(-s,s),this.mesh.rotation.z=W.randomBetween(-s,s);this.anchor.rotation.x+=W.randomBetween(-n(20),n(20)),this.rotationSpeed=[Math.random(),Math.random(),Math.random()].map(Math.abs)}function r(t){var n=t.children[0],r=120,a=5,s=20;!function c(){if(i.length<r){var t=new o(n);e.swarmObject3D.add(t.anchor),i.push(t),setTimeout(c,W.map(i.length/r,0,1,s,a,W.interpolations.easeIn))}}()}var i=[];e.swarmObject3D=new THREE.Object3D,e.scene.add(e.swarmObject3D),e.preCubeCamRenderFns.push(function(){e.swarmObject3D.visible=!1}),e.postCubeCamRenderFns.push(function(){e.swarmObject3D.visible=!0}),d(e,function(e,t){i.forEach(function(n){return n.update(e,t)})}),o.material=new THREE.MeshPhongMaterial({color:16777215,shininess:0,specular:16777215,envMap:e.cubeCamera.renderTarget,reflectivity:1,side:THREE.DoubleSide}),o.prototype.update=function(t,n){this.velocity[0]+=(e.velocity[0]-this.velocity[0])*(1-this.distance)*.05,this.velocity[1]+=(e.velocity[1]-this.velocity[1])*(1-this.distance)*.05,this.velocity[2]+=(e.velocity[2]-this.velocity[2])*(1-this.distance)*.05,this.anchor.rotation.x+=.4*this.velocity[0],this.anchor.rotation.y+=.4*this.velocity[1],this.anchor.rotation.z+=.4*this.velocity[2];Math.max(this.velocity[0],this.velocity[1],this.velocity[2]);this.mesh.rotation.x+=.01*this.rotationSpeed[0],this.mesh.rotation.y+=.01*this.rotationSpeed[1],this.mesh.rotation.z+=.01*this.rotationSpeed[2]};var a=new THREE.OBJLoader;a.load("/obj/pillow-box.obj",r),t(e)})}function l(e){return W.promise(function(t,n){var o=0,r=0;!function i(t){window.requestAnimationFrame(i),r=t-o,o=t,e.preRenderFns.forEach(function(e){return e(r,t)}),e.renderer.render(e.scene,e.camera)}(o),t(e)})}function d(e,t){return e.preRenderFns.push(t),e}function m(e,t,n,o){return e.camera.position.x=t,e.camera.position.y=n,e.camera.position.z=o,e}function p(e,t,n,o){return W.isDefined(t)&&null!==t&&(e.velocity[0]=t),W.isDefined(n)&&null!==n&&(e.velocity[1]=n),W.isDefined(o)&&null!==o&&(e.velocity[2]=o),e}var h=W.composePromisers(t,n,o,i,r,s,a,u,c,l);return{makeViz:e,initViz:h,setVelocity:p}}(),makeApp=function(){return{wsUrl:W.join("https:"===document.location.protocol?"wss://":"ws://",document.location.host,"/")}},initApp=W.composePromisers(makeWebSocketClient,addPunterCid,makePunterVizs,makeRestRadioButtons);$(function(){initApp(makeApp()).success(function(e){report("OK","TheWorkers.net"),window.app=e})});
//# sourceMappingURL=data:application/json;base64,